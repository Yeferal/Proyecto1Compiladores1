
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 26 15:30:52 CST 2020
//----------------------------------------------------

package replay;

import analizador.guardar.ManejadorFlota;
import analizador.guardar.ManejadorJuego;
import analizador.guardar.ManejadorMensaje;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import manejadores.*;
import objetos.*;
import objetos.Error;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 26 15:30:52 CST 2020
  */
public class AnalizadorSintacticoR extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoR() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoR(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoR(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\034\002\000\002\002" +
    "\011\000\002\035\002\000\002\036\002\000\002\003\012" +
    "\000\002\037\002\000\002\040\002\000\002\003\012\000" +
    "\002\041\002\000\002\042\002\000\002\003\012\000\002" +
    "\043\002\000\002\044\002\000\002\003\012\000\002\003" +
    "\004\000\002\003\004\000\002\021\004\000\002\021\002" +
    "\000\002\045\002\000\002\005\011\000\002\005\010\000" +
    "\002\046\002\000\002\005\007\000\002\005\010\000\002" +
    "\020\004\000\002\020\002\000\002\006\011\000\002\006" +
    "\011\000\002\007\003\000\002\007\003\000\002\047\002" +
    "\000\002\010\007\000\002\050\002\000\002\010\007\000" +
    "\002\051\002\000\002\010\007\000\002\022\004\000\002" +
    "\022\002\000\002\052\002\000\002\011\010\000\002\011" +
    "\005\000\002\053\002\000\002\012\010\000\002\012\005" +
    "\000\002\054\002\000\002\055\002\000\002\013\012\000" +
    "\002\056\002\000\002\013\007\000\002\057\002\000\002" +
    "\013\007\000\002\060\002\000\002\013\007\000\002\061" +
    "\002\000\002\013\007\000\002\062\002\000\002\013\007" +
    "\000\002\063\002\000\002\013\007\000\002\064\002\000" +
    "\002\013\007\000\002\023\004\000\002\023\002\000\002" +
    "\065\002\000\002\014\010\000\002\014\005\000\002\066" +
    "\002\000\002\015\011\000\002\067\002\000\002\015\007" +
    "\000\002\024\004\000\002\024\002\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\070\002\000\002" +
    "\004\011\000\002\071\002\000\002\004\011\000\002\025" +
    "\004\000\002\025\002\000\002\072\002\000\002\026\010" +
    "\000\002\026\005\000\002\026\002\000\002\073\002\000" +
    "\002\032\007\000\002\074\002\000\002\032\007\000\002" +
    "\075\002\000\002\032\007\000\002\076\002\000\002\032" +
    "\007\000\002\077\002\000\002\032\007\000\002\100\002" +
    "\000\002\032\007\000\002\027\004\000\002\027\002\000" +
    "\002\101\002\000\002\030\010\000\002\030\005\000\002" +
    "\030\002\000\002\102\002\000\002\033\011\000\002\103" +
    "\002\000\002\033\011\000\002\104\002\000\002\033\007" +
    "\000\002\105\002\000\002\033\007\000\002\031\004\000" +
    "\002\031\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\004\011\004\001\002\000\014\003\000\013" +
    "\000\014\000\015\000\016\000\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\014\003\010\013" +
    "\015\014\011\015\014\016\012\001\002\000\020\003\010" +
    "\013\015\014\011\015\014\016\012\057\216\060\220\001" +
    "\002\000\004\006\ufffb\001\002\000\004\006\ufff5\001\002" +
    "\000\004\012\214\001\002\000\004\006\ufff8\001\002\000" +
    "\004\006\ufffe\001\002\000\004\006\017\001\002\000\004" +
    "\011\020\001\002\000\012\017\ufffd\020\ufffd\025\ufffd\027" +
    "\ufffd\001\002\000\012\017\022\020\023\025\024\027\025" +
    "\001\002\000\004\006\114\001\002\000\004\006\071\001" +
    "\002\000\004\006\065\001\002\000\004\006\033\001\002" +
    "\000\004\012\027\001\002\000\006\007\030\012\uffef\001" +
    "\002\000\014\003\010\013\015\014\011\015\014\016\012" +
    "\001\002\000\004\012\ufffc\001\002\000\004\012\ufff0\001" +
    "\002\000\004\011\034\001\002\000\010\030\037\031\040" +
    "\032\035\001\002\000\004\006\061\001\002\000\004\012" +
    "\055\001\002\000\004\006\051\001\002\000\004\006\041" +
    "\001\002\000\006\055\042\056\043\001\002\000\006\007" +
    "\uffe4\012\uffe4\001\002\000\006\007\uffe3\012\uffe3\001\002" +
    "\000\006\007\uffe0\012\uffe0\001\002\000\006\007\046\012" +
    "\uffdb\001\002\000\010\030\037\031\040\032\035\001\002" +
    "\000\004\012\uffdf\001\002\000\004\012\uffdc\001\002\000" +
    "\006\055\042\056\043\001\002\000\006\007\uffe2\012\uffe2" +
    "\001\002\000\006\007\046\012\uffdb\001\002\000\004\012" +
    "\uffe1\001\002\000\006\007\056\012\uffe7\001\002\000\012" +
    "\017\022\020\023\025\024\027\025\001\002\000\004\012" +
    "\uffe9\001\002\000\004\012\uffe8\001\002\000\004\035\062" +
    "\001\002\000\006\007\uffde\012\uffde\001\002\000\006\007" +
    "\046\012\uffdb\001\002\000\004\012\uffdd\001\002\000\006" +
    "\055\042\056\043\001\002\000\006\007\uffeb\012\uffeb\001" +
    "\002\000\006\007\056\012\uffe7\001\002\000\004\012\uffea" +
    "\001\002\000\004\011\072\001\002\000\006\021\075\022" +
    "\074\001\002\000\004\012\112\001\002\000\004\006\104" +
    "\001\002\000\004\006\076\001\002\000\004\035\077\001" +
    "\002\000\004\007\100\001\002\000\004\022\101\001\002" +
    "\000\004\006\102\001\002\000\004\035\103\001\002\000" +
    "\004\012\uffe6\001\002\000\004\035\105\001\002\000\004" +
    "\007\106\001\002\000\004\021\107\001\002\000\004\006" +
    "\110\001\002\000\004\035\111\001\002\000\004\012\uffe5" +
    "\001\002\000\006\007\056\012\uffe7\001\002\000\004\012" +
    "\uffec\001\002\000\004\010\115\001\002\000\004\034\116" +
    "\001\002\000\004\010\117\001\002\000\006\007\uffee\012" +
    "\uffee\001\002\000\006\007\056\012\uffe7\001\002\000\004" +
    "\012\uffed\001\002\000\004\006\123\001\002\000\004\004" +
    "\124\001\002\000\004\011\ufff7\001\002\000\004\011\126" +
    "\001\002\000\022\032\140\037\137\040\132\041\142\044" +
    "\134\045\133\046\141\047\135\001\002\000\004\005\130" +
    "\001\002\000\006\007\030\012\uffef\001\002\000\004\012" +
    "\ufff6\001\002\000\004\006\210\001\002\000\004\006\204" +
    "\001\002\000\004\006\200\001\002\000\004\006\174\001" +
    "\002\000\004\012\170\001\002\000\004\006\161\001\002" +
    "\000\004\006\155\001\002\000\004\006\151\001\002\000" +
    "\004\006\143\001\002\000\004\035\144\001\002\000\006" +
    "\007\uffcd\012\uffcd\001\002\000\006\007\146\012\uffc2\001" +
    "\002\000\022\032\140\037\137\040\132\041\142\044\134" +
    "\045\133\046\141\047\135\001\002\000\004\012\uffcc\001" +
    "\002\000\004\012\uffc3\001\002\000\004\035\152\001\002" +
    "\000\006\007\uffc7\012\uffc7\001\002\000\006\007\146\012" +
    "\uffc2\001\002\000\004\012\uffc6\001\002\000\004\035\156" +
    "\001\002\000\006\007\uffcf\012\uffcf\001\002\000\006\007" +
    "\146\012\uffc2\001\002\000\004\012\uffce\001\002\000\004" +
    "\010\162\001\002\000\004\034\163\001\002\000\004\010" +
    "\uffd4\001\002\000\004\010\165\001\002\000\006\007\uffd3" +
    "\012\uffd3\001\002\000\006\007\146\012\uffc2\001\002\000" +
    "\004\012\uffd2\001\002\000\006\005\uffd5\007\uffd7\001\002" +
    "\000\004\007\172\001\002\000\004\011\126\001\002\000" +
    "\004\005\uffd6\001\002\000\004\035\175\001\002\000\006" +
    "\007\uffc5\012\uffc5\001\002\000\006\007\146\012\uffc2\001" +
    "\002\000\004\012\uffc4\001\002\000\004\035\201\001\002" +
    "\000\006\007\uffcb\012\uffcb\001\002\000\006\007\146\012" +
    "\uffc2\001\002\000\004\012\uffca\001\002\000\004\035\205" +
    "\001\002\000\006\007\uffc9\012\uffc9\001\002\000\006\007" +
    "\146\012\uffc2\001\002\000\004\012\uffc8\001\002\000\004" +
    "\035\211\001\002\000\006\007\uffd1\012\uffd1\001\002\000" +
    "\006\007\146\012\uffc2\001\002\000\004\012\uffd0\001\002" +
    "\000\004\011\215\001\002\000\006\057\216\060\220\001" +
    "\002\000\004\006\uffb5\001\002\000\004\012\271\001\002" +
    "\000\004\006\uffb3\001\002\000\004\006\222\001\002\000" +
    "\004\004\223\001\002\000\006\005\uff9a\011\224\001\002" +
    "\000\012\037\235\066\236\067\234\070\233\001\002\000" +
    "\004\005\226\001\002\000\006\007\227\012\uffb0\001\002" +
    "\000\006\057\216\060\220\001\002\000\004\012\uffb2\001" +
    "\002\000\004\012\uffb1\001\002\000\004\012\265\001\002" +
    "\000\004\006\261\001\002\000\004\006\253\001\002\000" +
    "\004\006\245\001\002\000\004\006\237\001\002\000\004" +
    "\035\240\001\002\000\006\007\uff93\012\uff93\001\002\000" +
    "\006\007\242\012\uff90\001\002\000\012\037\235\066\236" +
    "\067\234\070\233\001\002\000\004\012\uff92\001\002\000" +
    "\004\012\uff91\001\002\000\004\010\246\001\002\000\004" +
    "\034\247\001\002\000\004\010\250\001\002\000\006\007" +
    "\uff99\012\uff99\001\002\000\006\007\242\012\uff90\001\002" +
    "\000\004\012\uff98\001\002\000\004\010\254\001\002\000" +
    "\004\034\255\001\002\000\004\010\256\001\002\000\006" +
    "\007\uff97\012\uff97\001\002\000\006\007\242\012\uff90\001" +
    "\002\000\004\012\uff96\001\002\000\006\055\042\056\043" +
    "\001\002\000\006\007\uff95\012\uff95\001\002\000\006\007" +
    "\242\012\uff90\001\002\000\004\012\uff94\001\002\000\006" +
    "\005\uff9b\007\uff9d\001\002\000\004\007\267\001\002\000" +
    "\006\005\uff9a\011\224\001\002\000\004\005\uff9c\001\002" +
    "\000\004\002\uffff\001\002\000\004\006\273\001\002\000" +
    "\004\004\274\001\002\000\006\005\uffac\011\275\001\002" +
    "\000\016\061\305\062\301\063\302\064\303\066\306\070" +
    "\304\001\002\000\004\005\277\001\002\000\006\007\227" +
    "\012\uffb0\001\002\000\004\012\uffb4\001\002\000\004\006" +
    "\342\001\002\000\004\006\336\001\002\000\004\006\332" +
    "\001\002\000\004\006\326\001\002\000\004\006\322\001" +
    "\002\000\004\006\314\001\002\000\004\012\310\001\002" +
    "\000\006\005\uffad\007\uffaf\001\002\000\004\007\312\001" +
    "\002\000\006\005\uffac\011\275\001\002\000\004\005\uffae" +
    "\001\002\000\004\035\315\001\002\000\006\007\uffa5\012" +
    "\uffa5\001\002\000\006\007\317\012\uff9e\001\002\000\016" +
    "\061\305\062\301\063\302\064\303\066\306\070\304\001" +
    "\002\000\004\012\uffa4\001\002\000\004\012\uff9f\001\002" +
    "\000\004\035\323\001\002\000\006\007\uffab\012\uffab\001" +
    "\002\000\006\007\317\012\uff9e\001\002\000\004\012\uffaa" +
    "\001\002\000\006\055\042\056\043\001\002\000\006\007" +
    "\uffa1\012\uffa1\001\002\000\006\007\317\012\uff9e\001\002" +
    "\000\004\012\uffa0\001\002\000\004\035\333\001\002\000" +
    "\006\007\uffa3\012\uffa3\001\002\000\006\007\317\012\uff9e" +
    "\001\002\000\004\012\uffa2\001\002\000\004\035\337\001" +
    "\002\000\006\007\uffa7\012\uffa7\001\002\000\006\007\317" +
    "\012\uff9e\001\002\000\004\012\uffa6\001\002\000\004\035" +
    "\343\001\002\000\006\007\uffa9\012\uffa9\001\002\000\006" +
    "\007\317\012\uff9e\001\002\000\004\012\uffa8\001\002\000" +
    "\004\006\347\001\002\000\004\004\350\001\002\000\004" +
    "\011\ufff4\001\002\000\004\011\352\001\002\000\006\037" +
    "\357\051\360\001\002\000\004\005\354\001\002\000\006" +
    "\007\030\012\uffef\001\002\000\004\012\ufff3\001\002\000" +
    "\004\012\u0100\001\002\000\004\006\372\001\002\000\004" +
    "\006\361\001\002\000\010\052\362\053\365\054\363\001" +
    "\002\000\006\007\uffb8\012\uffb8\001\002\000\006\007\uffb6" +
    "\012\uffb6\001\002\000\006\007\uffbc\012\uffbc\001\002\000" +
    "\006\007\uffb7\012\uffb7\001\002\000\006\007\367\012\uffb9" +
    "\001\002\000\006\037\357\051\360\001\002\000\004\012" +
    "\uffbb\001\002\000\004\012\uffba\001\002\000\004\010\373" +
    "\001\002\000\004\034\374\001\002\000\004\010\375\001" +
    "\002\000\006\007\uffbe\012\uffbe\001\002\000\006\007\367" +
    "\012\uffb9\001\002\000\004\012\uffbd\001\002\000\006\005" +
    "\uffbf\007\uffc1\001\002\000\004\007\u0102\001\002\000\004" +
    "\011\352\001\002\000\004\005\uffc0\001\002\000\004\006" +
    "\u0105\001\002\000\004\004\u0106\001\002\000\004\011\ufffa" +
    "\001\002\000\004\011\u0108\001\002\000\022\032\140\037" +
    "\137\040\132\041\142\044\134\045\133\046\141\047\135" +
    "\001\002\000\004\005\u010a\001\002\000\006\007\030\012" +
    "\uffef\001\002\000\004\012\ufff9\001\002\000\004\012\u010d" +
    "\001\002\000\006\005\uffd8\007\uffda\001\002\000\004\007" +
    "\u010f\001\002\000\004\011\u0108\001\002\000\004\005\uffd9" +
    "\001\002\000\004\012\ufff2\001\002\000\004\012\ufff1\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0110\000\004\002\004\001\001\000\004\034\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\012" +
    "\001\001\000\006\003\u0110\004\u0111\001\001\000\004\037" +
    "\u0103\001\001\000\004\043\345\001\001\000\002\001\001" +
    "\000\004\041\121\001\001\000\004\035\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\036\020\001\001" +
    "\000\004\005\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\030\001\001\000\004\003\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\050\044\001" +
    "\001\000\004\022\046\001\001\000\004\010\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\051\001" +
    "\001\000\004\047\052\001\001\000\004\022\053\001\001" +
    "\000\002\001\001\000\004\020\056\001\001\000\004\005" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\062\001\001\000\004\022\063\001" +
    "\001\000\002\001\001\000\004\007\065\001\001\000\004" +
    "\046\066\001\001\000\004\020\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\117\001\001\000\004\020\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\042\124\001\001\000\004\012\126\001\001\000" +
    "\004\013\135\001\001\000\002\001\001\000\004\021\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\144\001\001" +
    "\000\004\023\146\001\001\000\004\013\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\152\001\001\000\004\023\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\156\001\001\000\004" +
    "\023\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\163\001\001\000\002\001\001" +
    "\000\004\055\165\001\001\000\004\023\166\001\001\000" +
    "\002\001\001\000\004\053\170\001\001\000\002\001\001" +
    "\000\004\012\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\175\001\001\000\004\023\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\201\001" +
    "\001\000\004\023\202\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\062\205\001\001\000\004\023\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\211" +
    "\001\001\000\004\023\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\216\001\001\000\004\070\271" +
    "\001\001\000\002\001\001\000\004\071\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\224\001\001" +
    "\000\004\033\231\001\001\000\002\001\001\000\004\025" +
    "\227\001\001\000\004\004\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\105\240\001\001\000\004\031\242\001" +
    "\001\000\004\033\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\102\250\001\001\000\004\031\251\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\103\256\001\001\000\004\031\257" +
    "\001\001\000\002\001\001\000\004\007\261\001\001\000" +
    "\004\104\262\001\001\000\004\031\263\001\001\000\002" +
    "\001\001\000\004\101\265\001\001\000\002\001\001\000" +
    "\004\030\267\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\275\001" +
    "\001\000\004\032\306\001\001\000\002\001\001\000\004" +
    "\025\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\310\001\001\000\002\001\001\000\004\026\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\315\001" +
    "\001\000\004\027\317\001\001\000\004\032\320\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\073\323\001\001\000\004\027\324\001\001\000\002" +
    "\001\001\000\004\007\326\001\001\000\004\100\327\001" +
    "\001\000\004\027\330\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\077\333\001\001\000\004\027\334\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\337" +
    "\001\001\000\004\027\340\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\343\001\001\000\004\027\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\350\001\001\000\004\014\352\001\001" +
    "\000\004\015\355\001\001\000\002\001\001\000\004\021" +
    "\354\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\363\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\365\001\001" +
    "\000\002\001\001\000\004\024\367\001\001\000\004\015" +
    "\370\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\375\001\001\000\004\024\376\001\001\000\002\001\001" +
    "\000\004\065\u0100\001\001\000\002\001\001\000\004\014" +
    "\u0102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0106\001\001\000\004\011\u0108\001" +
    "\001\000\004\013\u010b\001\001\000\002\001\001\000\004" +
    "\021\u010a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\u010d\001\001\000\002\001\001\000\004\011\u010f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoR$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoR$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoR$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    boolean correcto = true;
    Juego juego;
    Mapa mapa;
    ManejadorMapa manejadorMapa;
    ArrayList<Planeta> listaPlanetas;
    ArrayList<Planeta> listaPlanetasNeutrales;
    ArrayList<Jugador> listaJugadores;
    ArrayList<Mensaje> listaMensajes;
    ArrayList<Repeticion> listaRepeticion;
    ArrayList<Error> listaErrores = new  ArrayList<>();

    public void setAtributos(ManejadorMapa manejadorMapa, Mapa mapa, ArrayList<Planeta> listaPlanetas, ArrayList<Planeta> listaPlanetasNeutrales, ArrayList<Jugador> listaJugadores,ArrayList<Mensaje> listaMensajes, ArrayList<Repeticion> listaRepeticion){
        this.mapa = mapa;
        this.manejadorMapa = manejadorMapa;
        this.listaPlanetas = listaPlanetas;
        this.listaPlanetasNeutrales = listaPlanetasNeutrales;
        this.listaJugadores = listaJugadores;
        this.listaMensajes = listaMensajes;
        this.listaRepeticion = listaRepeticion;
    }
    public void setJuego(){
        juego = new Juego(mapa,manejadorMapa,listaPlanetas,listaPlanetasNeutrales,listaJugadores);
    }
    
    public boolean isCorrecto(){
        return correcto;
    }

    public Juego getJuego(){
        return juego;
    }

    public ArrayList<Mensaje> getListaMensajes(){
        return listaMensajes;
    }

    public ArrayList<Repeticion> getListaRepeticiones(){
        return listaRepeticion;
    }

    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            correcto = false;
            if(s!=null){
                Error e = new Error((String) s.value, "Sintactico", "Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, s.right, s.left);
                listaErrores.add(e);
                //escribirErrores(e);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }

    public ArrayList<Error> getListaErrores(){
        return listaErrores;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoR$actions {


    Mapa mapa = null;
    ArrayList<Planeta> listaPlanetas = new ArrayList<>();
    ArrayList<Planeta> listaPlanetasNeutrales = new ArrayList<>();
    ArrayList<Jugador> listaJugadores = new ArrayList<>();
    ArrayList<Mensaje> listaMensajes = new ArrayList<>();
    ArrayList<Repeticion> listaRepeticion = new ArrayList<>();
    ManejadorMapa manejadorMapa = new ManejadorMapa();
    ManejadorPlanetas manejadorPlanetas = new ManejadorPlanetas();
    ManejadorJugador manejadorJugador = new ManejadorJugador();
    ManejadorMensaje manejadorMensaje = new ManejadorMensaje();
    ManejadorReplay manejadorReplay = new ManejadorReplay();
    ManejadorJuego manejadorJuego = new ManejadorJuego();
    Planeta p;
    Jugador jugador;
    Repeticion repeticion;
    Mensaje mensaje;

  private final AnalizadorSintacticoR parser;

  /** Constructor */
  CUP$AnalizadorSintacticoR$actions(AnalizadorSintacticoR parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoR$do_action(
    int                        CUP$AnalizadorSintacticoR$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoR$parser,
    java.util.Stack            CUP$AnalizadorSintacticoR$stack,
    int                        CUP$AnalizadorSintacticoR$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoR$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoR$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ETM_FIN ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ETM_FIN",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ETM_FIN ::= COMA ATRIB_MENSAJE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ETM_FIN",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ATRIB_MENSAJE ::= TURNO DOS_PUNTOS NUMERO NT$41 ETM_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_MENSAJE",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$41 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 mensaje.setTurno(Integer.parseInt((String) n)); manejadorMensaje.isExiste(4);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$41",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ATRIB_MENSAJE ::= RESULTADO DOS_PUNTOS BOLEANO NT$40 ETM_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_MENSAJE",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$40 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 mensaje.setResultado((boolean) b); manejadorMensaje.isExiste(3);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$40",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ATRIB_MENSAJE ::= NOMBRE_JUG DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$39 ETM_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_MENSAJE",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$39 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
 mensaje.setJugador((String) a); manejadorMensaje.isExiste(2);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$39",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ATRIB_MENSAJE ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$38 ETM_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_MENSAJE",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$38 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
 mensaje.setPlaneta((String) a); manejadorMensaje.isExiste(1);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$38",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ESTRUCTURA_MENSAJE ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MENSAJE",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ESTRUCTURA_MENSAJE ::= LLAVES_A ATRIB_MENSAJE LLAVES_C 
            {
              Object RESULT =null;
		
                        if(manejadorMensaje.isCompleto()){
                            listaMensajes.add(mensaje);
                            manejadorMensaje.resetear();
                            mensaje = new Mensaje();
                        }
                    
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MENSAJE",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESTRUCTURA_MENSAJE ::= LLAVES_A ATRIB_MENSAJE LLAVES_C NT$37 COMA ESTRUCTURA_MENSAJE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MENSAJE",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$37 ::= 
            {
              Object RESULT =null;

                        if(manejadorMensaje.isCompleto()){
                            listaMensajes.add(mensaje);
                            manejadorMensaje.resetear();
                            mensaje = new Mensaje();
                        }
                    
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$37",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ETF_FIN ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ETF_FIN",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ETF_FIN ::= COMA ATRIB_REPETICION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ETF_FIN",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ATRIB_REPETICION ::= RESULTADO DOS_PUNTOS BOLEANO NT$36 ETF_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_REPETICION",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$36 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 repeticion.setResultado((boolean) b); manejadorReplay.isExiste(6);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$36",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ATRIB_REPETICION ::= TURNO_JUGADOR DOS_PUNTOS NUMERO NT$35 ETF_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_REPETICION",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$35 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 repeticion.setTurnoJugador(Integer.parseInt((String) n)); manejadorReplay.isExiste(5);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$35",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ATRIB_REPETICION ::= TURNO DOS_PUNTOS NUMERO NT$34 ETF_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_REPETICION",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$34 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 repeticion.setTurnoNumero(Integer.parseInt((String) n)); manejadorReplay.isExiste(4);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$34",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ATRIB_REPETICION ::= TIPOPLANETA DOS_PUNTOS NUMERO NT$33 ETF_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$33
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_REPETICION",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$33 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 repeticion.setTipoPlanetaDestino(Integer.parseInt((String) n)); manejadorReplay.isExiste(3);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$33",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ATRIB_REPETICION ::= DESTINO DOS_PUNTOS NUMERO NT$32 ETF_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_REPETICION",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$32 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 repeticion.setPosicionDestion(Integer.parseInt((String) n)); manejadorReplay.isExiste(2);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$32",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ATRIB_REPETICION ::= ORIGEN DOS_PUNTOS NUMERO NT$31 ETF_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$31
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_REPETICION",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$31 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 repeticion.setPosicionOrigen(Integer.parseInt((String) n)); manejadorReplay.isExiste(1);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$31",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ESTRUCTURA_REPETICION ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_REPETICION",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ESTRUCTURA_REPETICION ::= LLAVES_A ATRIB_REPETICION LLAVES_C 
            {
              Object RESULT =null;
		
                        if(manejadorReplay.isCompleto()){
                            listaRepeticion.add(repeticion);
                            manejadorReplay.resetear();
                            repeticion = new Repeticion();
                        }
                    
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_REPETICION",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ESTRUCTURA_REPETICION ::= LLAVES_A ATRIB_REPETICION LLAVES_C NT$30 COMA ESTRUCTURA_REPETICION 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_REPETICION",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$30 ::= 
            {
              Object RESULT =null;

                        if(manejadorReplay.isCompleto()){
                            listaRepeticion.add(repeticion);
                            manejadorReplay.resetear();
                            repeticion = new Repeticion();
                        }
                    
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$30",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FIN_S1 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("FIN_S1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FIN_S1 ::= COMA S1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("FIN_S1",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // S1 ::= MENSAJES NT$29 DOS_PUNTOS CORCHE_A ESTRUCTURA_MENSAJE CORCHE_C FIN_S1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$29
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("S1",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$29 ::= 
            {
              Object RESULT =null;
 manejadorJuego.isExiste(6); mensaje = new Mensaje(); 
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$29",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // S1 ::= REPETICION NT$28 DOS_PUNTOS CORCHE_A ESTRUCTURA_REPETICION CORCHE_C FIN_S1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("S1",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$28 ::= 
            {
              Object RESULT =null;
 manejadorJuego.isExiste(5); repeticion = new Repeticion(); 
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$28",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DIFICULTADES ::= DIFICIL 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("DIFICULTADES",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DIFICULTADES ::= FACIL 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("DIFICULTADES",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DIFICULTADES ::= HUMANO 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("DIFICULTADES",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATJ_FIN ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATJ_FIN",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATJ_FIN ::= COMA ATRIB_JUGADORES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATJ_FIN",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ATRIB_JUGADORES ::= TIPO DOS_PUNTOS DIFICULTADES NT$27 ATJ_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_JUGADORES",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$27 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 manejadorJugador.isExiste(2); jugador.setTipo(Integer.parseInt(t.toString()));
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$27",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATRIB_JUGADORES ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$26 ATJ_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_JUGADORES",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$26 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;

                        manejadorJugador.isExiste(1);
                        if(manejadorJugador.isCorrecto((String) a)){
                            jugador.setNombre((String) a);
                            
                        }else{parser.syntax_error((Symbol)a);}

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$26",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ESTRUCTURA_JUGADORES ::= LLAVES_A ATRIB_JUGADORES LLAVES_C 
            {
              Object RESULT =null;
		
                            
                            if(jugador.getNombre()!=null){
                                jugador.pintar();
                                if(manejadorJugador.isExistJugador(listaJugadores,jugador) ){
                                    jugador.pintar();
                                    listaJugadores.add(jugador);
                                    manejadorJugador.resetear();
                                    jugador = new Jugador();
                                }
                            }

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_JUGADORES",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ESTRUCTURA_JUGADORES ::= LLAVES_A ATRIB_JUGADORES LLAVES_C NT$25 COMA ESTRUCTURA_JUGADORES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_JUGADORES",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$25 ::= 
            {
              Object RESULT =null;

                            
                            if(jugador.getNombre()!=null){
                                jugador.pintar();
                                if(manejadorJugador.isExistJugador(listaJugadores,jugador) && manejadorJugador.isCompleto()){
                                    jugador.pintar();
                                    listaJugadores.add(jugador);
                                    manejadorJugador.resetear();
                                    jugador = new Jugador();
                                }
                            }

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$25",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATP_FIN ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATP_FIN",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATP_FIN ::= COMA ATRIB_PLANETAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATP_FIN",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ATRIB_PLANETAS ::= JUGADOR DOS_PUNTOS NUMERO NT$24 ATP_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$24 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
p.setJugador(Integer.parseInt((String) n)); manejadorPlanetas.isExiste(8);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$24",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATRIB_PLANETAS ::= NAVES_ENVIADAS DOS_PUNTOS NUMERO NT$23 ATP_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$23 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
p.setNavesEnviadas(Integer.parseInt((String) n));  manejadorPlanetas.isExiste(7);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$23",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATRIB_PLANETAS ::= COORDENADA_Y DOS_PUNTOS NUMERO NT$22 ATP_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$22 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
p.setCoordenadaY(Integer.parseInt((String) n)); manejadorPlanetas.isExiste(6);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$22",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATRIB_PLANETAS ::= COORDENADA_X DOS_PUNTOS NUMERO NT$21 ATP_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$21 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
p.setCoordenadaX(Integer.parseInt((String) n)); manejadorPlanetas.isExiste(5);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$21",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIB_PLANETAS ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO NT$20 ATP_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$20 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
p.setPorcentajeMuertes(Double.parseDouble((String) n));manejadorPlanetas.isExiste(4);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$20",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ATRIB_PLANETAS ::= PRODUCCION DOS_PUNTOS NUMERO NT$19 ATP_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$19 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
p.setProduccion(Integer.parseInt((String) n));manejadorPlanetas.isExiste(3);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$19",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ATRIB_PLANETAS ::= NAVES DOS_PUNTOS NUMERO NT$18 ATP_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$18 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
p.setNaves(Integer.parseInt((String) n));manejadorPlanetas.isExiste(2);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$18",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ATRIB_PLANETAS ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR NT$16 COMILLAS NT$17 ATP_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$17 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null); parser.syntax_error((Symbol)a);}
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$17",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$16 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
manejadorPlanetas.isExiste(1);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$16",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESTRUCTURA_PLANT_NEU ::= LLAVES_A ATRIB_PLANETAS LLAVES_C 
            {
              Object RESULT =null;
		 
                        if(manejadorPlanetas.isExistPlaneta(listaPlanetasNeutrales,p)){
                            if(manejadorPlanetas.isCompleto()){
                                p.setTipo(0);
                                listaPlanetasNeutrales.add(p);
                                manejadorPlanetas.resetear();
                                p = new Planeta();
                            }
                        }
                    
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANT_NEU",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ESTRUCTURA_PLANT_NEU ::= LLAVES_A ATRIB_PLANETAS LLAVES_C NT$15 COMA ESTRUCTURA_PLANT_NEU 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANT_NEU",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$15 ::= 
            {
              Object RESULT =null;
 
                                if(manejadorPlanetas.isExistPlaneta(listaPlanetasNeutrales,p)){
                                    if(manejadorPlanetas.isCompleto()){
                                        p.setTipo(0);
                                        listaPlanetasNeutrales.add(p);
                                        manejadorPlanetas.resetear();
                                        p = new Planeta();
                                    }
                                }
                    
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$15",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ESTRUCTURA_PLANETAS ::= LLAVES_A ATRIB_PLANETAS LLAVES_C 
            {
              Object RESULT =null;
		
                            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                                if(manejadorPlanetas.isCompleto()){
                                    p.setTipo(1);
                                    listaPlanetas.add(p);
                                    manejadorPlanetas.resetear();
                                    p = new Planeta();
                                }
                            }
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANETAS",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ESTRUCTURA_PLANETAS ::= LLAVES_A ATRIB_PLANETAS LLAVES_C NT$14 COMA ESTRUCTURA_PLANETAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANETAS",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$14 ::= 
            {
              Object RESULT =null;

                    if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                        if(manejadorPlanetas.isCompleto()){
                            p.setTipo(1);
                            listaPlanetas.add(p);
                            manejadorPlanetas.resetear();
                            p = new Planeta();
                        }
                    }
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$14",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FIN_ATRIB_NEU ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("FIN_ATRIB_NEU",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FIN_ATRIB_NEU ::= COMA ATRIB_NEU 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("FIN_ATRIB_NEU",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIB_NEU ::= PRODUCCION DOS_PUNTOS NUMERO NT$13 FIN_ATRIB_NEU 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$13 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
mapa.setProduccionNeutrales(Integer.parseInt((String) n));
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$13",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATRIB_NEU ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO NT$12 FIN_ATRIB_NEU 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$12 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
mapa.setMostrarEstadisticasNeutrales((boolean) b);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$12",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIB_NEU ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO NT$11 FIN_ATRIB_NEU 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$11 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
mapa.setMostrarNavesNeutrales((boolean) b);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$11",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // BOLEANO ::= FALSE 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("BOLEANO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // BOLEANO ::= TRUE 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("BOLEANO",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DIMENSION ::= COLUMNAS DOS_PUNTOS NUMERO COMA FILAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
		 
                    if(!manejadorMapa.isExiste(2)){
                        mapa.setTamanioX(Integer.parseInt((String) x));
                        mapa.setTamanioY(Integer.parseInt((String) y));
                    }

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("DIMENSION",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DIMENSION ::= FILAS DOS_PUNTOS NUMERO COMA COLUMNAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
		 
                    if(!manejadorMapa.isExiste(2)){
                        mapa.setTamanioX(Integer.parseInt((String) x));
                        mapa.setTamanioY(Integer.parseInt((String) y));
                    }

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("DIMENSION",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MAPA_FIN ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("MAPA_FIN",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MAPA_FIN ::= COMA ESTRUCTURA_MAPA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("MAPA_FIN",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ESTRUCTURA_MAPA ::= NEUTRALES DOS_PUNTOS LLAVES_A ATRIB_NEU LLAVES_C MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESTRUCTURA_MAPA ::= MAPA_CIEGO DOS_PUNTOS BOLEANO NT$10 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.peek()).value;
 
                    if(!manejadorMapa.isExiste(5)){
                        mapa.setMapaCiego((boolean) b);
                    }else{
                        parser.syntax_error((Symbol)b);
                    }

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$10",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTRUCTURA_MAPA ::= TAMANO DOS_PUNTOS LLAVES_A DIMENSION LLAVES_C MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTRUCTURA_MAPA ::= ID DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$9 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
 
                    if(!manejadorMapa.isExiste(1)){
                        mapa.setId((String) a);
                    }else{
                        parser.syntax_error((Symbol)a);
                    }

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$9",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FIN_S0 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("FIN_S0",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FIN_S0 ::= COMA S0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("FIN_S0",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S0 ::= error S1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S0 ::= error S0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S0 ::= JUGADORES NT$7 DOS_PUNTOS CORCHE_A NT$8 ESTRUCTURA_JUGADORES CORCHE_C FIN_S0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$8",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$7 ::= 
            {
              Object RESULT =null;
manejadorJuego.isExiste(4); jugador = new Jugador(); 
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$7",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S0 ::= PLANETAS_NEUTRALES NT$5 DOS_PUNTOS CORCHE_A NT$6 ESTRUCTURA_PLANT_NEU CORCHE_C FIN_S0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$6 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$6",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$5 ::= 
            {
              Object RESULT =null;
manejadorJuego.isExiste(3); p = new Planeta(); manejadorPlanetas.resetear();
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$5",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S0 ::= PLANETAS NT$3 DOS_PUNTOS CORCHE_A NT$4 ESTRUCTURA_PLANETAS CORCHE_C FIN_S0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$4",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$3 ::= 
            {
              Object RESULT =null;
manejadorJuego.isExiste(2); p = new Planeta(); manejadorPlanetas.resetear();
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$3",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S0 ::= MAPA NT$1 DOS_PUNTOS LLAVES_A NT$2 ESTRUCTURA_MAPA LLAVES_C FIN_S0 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-3)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-2)).value;

              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$2",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT =null;
 manejadorJuego.isExiste(1); mapa = new Mapa();
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$1",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= LLAVES_A NT$0 S0 LLAVES_C LLAVES_A S1 LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-5)).value;
		 parser.setAtributos(manejadorMapa, mapa, listaPlanetas, listaPlanetasNeutrales, listaJugadores, listaMensajes, listaRepeticion);
                    parser.setJuego();
                    
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT =null;
manejadorJuego = new ManejadorJuego();
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("NT$0",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoR$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoR$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.elementAt(CUP$AnalizadorSintacticoR$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoR$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoR$parser.done_parsing();
          return CUP$AnalizadorSintacticoR$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

