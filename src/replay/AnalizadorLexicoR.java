/* The following code was generated by JFlex 1.4.3 on 26/03/20 06:13 PM */

package replay;
import java_cup.runtime.*;
import objetos.Error;
import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 26/03/20 06:13 PM from the specification file
 * <tt>LexerR.jflex</tt>
 */
public class AnalizadorLexicoR implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\61\2\0\1\4\22\0\1\4\1\0\1\60\1\0"+
    "\1\2\7\0\1\70\1\1\1\62\1\0\12\3\1\63\6\0\1\6"+
    "\1\2\1\27\1\22\1\12\1\57\1\21\1\56\1\26\1\20\1\2"+
    "\1\10\1\5\1\11\1\23\1\7\1\2\1\17\1\14\1\13\1\16"+
    "\2\2\1\54\1\55\1\2\1\64\1\0\1\65\1\0\1\15\1\0"+
    "\1\32\1\53\1\34\1\25\1\44\1\30\1\46\1\2\1\24\1\50"+
    "\1\2\1\31\1\37\1\40\1\35\1\43\1\2\1\42\1\33\1\45"+
    "\1\36\1\47\3\2\1\41\1\66\1\0\1\67\63\0\1\52\21\0"+
    "\1\51\uff3c\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\24\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\0\7\3"+
    "\1\15\26\3\1\4\37\3\1\16\27\3\1\17\2\3"+
    "\1\20\12\3\1\21\1\3\1\22\7\3\1\23\6\3"+
    "\1\0\1\3\1\0\1\24\2\3\1\25\10\3\1\26"+
    "\3\3\1\27\3\3\1\30\5\3\2\31\1\0\4\3"+
    "\1\32\5\3\1\33\1\34\15\3\1\35\4\3\1\36"+
    "\1\37\4\3\1\40\1\41\7\3\1\42\10\3\1\43"+
    "\1\3\1\44\2\3\1\45\4\3\1\46\11\3\1\47"+
    "\10\3\1\50\7\3\1\51\1\52\6\3\1\53\1\3"+
    "\1\54\3\3\1\55\1\56\5\3\1\57\1\60\3\3"+
    "\1\61\1\62\7\3\1\63\12\3\1\64\1\65\1\66"+
    "\1\3\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720"+
    "\0\u0759\0\253\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u05ca\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\253\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5"+
    "\0\u14ee\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d"+
    "\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\253\0\u1929\0\u1962\0\u199b\0\u19d4"+
    "\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\253\0\u1b63"+
    "\0\253\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba"+
    "\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\253\0\u2010\0\u2049"+
    "\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166\0\u219f\0\253\0\u21d8"+
    "\0\u2211\0\u224a\0\253\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367"+
    "\0\u23a0\0\u23d9\0\u2412\0\u244b\0\71\0\253\0\u2484\0\u24bd"+
    "\0\u24f6\0\u252f\0\u2568\0\253\0\u25a1\0\u25da\0\u2613\0\u264c"+
    "\0\u2685\0\253\0\253\0\u26be\0\u26f7\0\u2730\0\u2769\0\u27a2"+
    "\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a"+
    "\0\71\0\u29a3\0\u29dc\0\u2a15\0\u2a4e\0\253\0\u2a87\0\u2ac0"+
    "\0\u2af9\0\u2b32\0\u2b6b\0\253\0\253\0\u2ba4\0\u2bdd\0\u2c16"+
    "\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c\0\u2da5\0\u2dde"+
    "\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\253\0\u2f34\0\253"+
    "\0\u2f6d\0\u2fa6\0\253\0\u2fdf\0\u3018\0\u3051\0\u308a\0\253"+
    "\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252"+
    "\0\u328b\0\253\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1"+
    "\0\u341a\0\u3453\0\253\0\u348c\0\u34c5\0\u34fe\0\u3537\0\u3570"+
    "\0\u35a9\0\u35e2\0\253\0\253\0\u361b\0\u3654\0\u368d\0\u36c6"+
    "\0\u36ff\0\u3738\0\253\0\u3771\0\253\0\u37aa\0\u37e3\0\u381c"+
    "\0\253\0\253\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\253"+
    "\0\253\0\u3972\0\u39ab\0\u39e4\0\253\0\253\0\u3a1d\0\u3a56"+
    "\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\253\0\u3bac\0\u3be5"+
    "\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad"+
    "\0\253\0\253\0\253\0\u3de6\0\253";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\4\1\10"+
    "\1\4\1\11\5\4\1\12\1\13\1\4\1\14\1\4"+
    "\1\15\1\16\2\4\1\17\1\4\1\20\1\4\1\21"+
    "\1\22\1\4\1\23\1\24\1\4\1\25\1\26\1\4"+
    "\1\27\2\4\1\30\2\2\3\4\1\31\1\32\1\33"+
    "\1\6\1\2\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\72\0\3\3\1\0\44\3\2\0\5\3\12\0\3\4"+
    "\1\0\44\4\2\0\5\4\12\0\2\3\1\5\1\0"+
    "\44\3\2\0\5\3\2\0\1\42\12\0\1\6\54\0"+
    "\1\6\10\0\3\4\1\0\1\4\1\43\3\4\1\44"+
    "\36\4\2\0\5\4\12\0\3\4\1\0\3\4\1\45"+
    "\40\4\2\0\5\4\12\0\3\4\1\0\5\4\1\46"+
    "\36\4\2\0\5\4\12\0\3\4\1\0\5\4\1\47"+
    "\36\4\2\0\5\4\12\0\3\4\1\0\11\4\1\50"+
    "\32\4\2\0\5\4\12\0\3\4\1\0\21\4\1\51"+
    "\22\4\2\0\5\4\12\0\3\4\1\0\20\4\1\52"+
    "\23\4\2\0\5\4\12\0\3\4\1\0\37\4\1\53"+
    "\4\4\2\0\5\4\12\0\3\4\1\0\17\4\1\54"+
    "\5\4\1\55\16\4\2\0\5\4\12\0\3\4\1\0"+
    "\24\4\1\56\2\4\1\57\14\4\2\0\5\4\12\0"+
    "\3\4\1\0\30\4\1\60\13\4\2\0\5\4\12\0"+
    "\3\4\1\0\35\4\1\61\6\4\2\0\5\4\12\0"+
    "\3\4\1\0\25\4\1\62\2\4\1\63\13\4\2\0"+
    "\5\4\12\0\3\4\1\0\25\4\1\64\2\4\1\65"+
    "\13\4\2\0\5\4\12\0\3\4\1\0\37\4\1\66"+
    "\4\4\2\0\5\4\12\0\3\4\1\0\24\4\1\67"+
    "\3\4\1\70\4\4\1\71\6\4\2\0\5\4\12\0"+
    "\3\4\1\0\17\4\1\72\5\4\1\73\3\4\1\74"+
    "\3\4\1\75\6\4\2\0\5\4\12\0\3\4\1\0"+
    "\31\4\1\76\12\4\2\0\5\4\12\0\3\4\1\0"+
    "\11\4\1\77\32\4\2\0\5\4\12\0\3\4\1\0"+
    "\1\4\1\100\42\4\2\0\5\4\14\0\1\101\66\0"+
    "\3\4\1\0\2\4\1\102\41\4\2\0\5\4\12\0"+
    "\3\4\1\0\4\4\1\103\37\4\2\0\5\4\12\0"+
    "\3\4\1\0\1\4\1\104\42\4\2\0\5\4\12\0"+
    "\3\4\1\0\11\4\1\105\32\4\2\0\5\4\12\0"+
    "\3\4\1\0\2\4\1\106\41\4\2\0\5\4\12\0"+
    "\3\4\1\0\14\4\1\107\27\4\2\0\5\4\12\0"+
    "\3\4\1\0\44\4\2\0\4\4\1\110\12\0\3\4"+
    "\1\0\26\4\1\111\15\4\2\0\5\4\12\0\3\4"+
    "\1\0\24\4\1\112\6\4\1\113\10\4\2\0\5\4"+
    "\12\0\3\4\1\0\24\4\1\114\17\4\2\0\5\4"+
    "\12\0\3\4\1\0\1\4\1\115\42\4\2\0\5\4"+
    "\12\0\3\4\1\0\31\4\1\116\12\4\2\0\5\4"+
    "\12\0\3\4\1\0\24\4\1\117\3\4\1\120\13\4"+
    "\2\0\5\4\12\0\3\4\1\0\17\4\1\121\24\4"+
    "\2\0\5\4\12\0\3\4\1\0\36\4\1\122\5\4"+
    "\2\0\5\4\12\0\3\4\1\0\26\4\1\123\15\4"+
    "\2\0\5\4\12\0\3\4\1\0\42\4\1\124\1\4"+
    "\2\0\5\4\12\0\3\4\1\0\32\4\1\125\11\4"+
    "\2\0\5\4\12\0\3\4\1\0\26\4\1\126\15\4"+
    "\2\0\5\4\12\0\3\4\1\0\25\4\1\127\16\4"+
    "\2\0\5\4\12\0\3\4\1\0\35\4\1\130\6\4"+
    "\2\0\5\4\12\0\3\4\1\0\30\4\1\131\13\4"+
    "\2\0\5\4\12\0\3\4\1\0\36\4\1\132\5\4"+
    "\2\0\5\4\12\0\3\4\1\0\32\4\1\133\11\4"+
    "\2\0\5\4\12\0\3\4\1\0\35\4\1\134\6\4"+
    "\2\0\5\4\12\0\3\4\1\0\31\4\1\135\12\4"+
    "\2\0\5\4\12\0\3\4\1\0\41\4\1\136\2\4"+
    "\2\0\5\4\12\0\3\4\1\0\1\137\43\4\2\0"+
    "\5\4\12\0\3\4\1\0\22\4\1\140\21\4\2\0"+
    "\5\4\12\0\3\4\1\0\1\4\1\141\42\4\2\0"+
    "\5\4\12\0\3\4\1\0\7\4\1\142\34\4\2\0"+
    "\5\4\12\0\3\4\1\0\4\4\1\143\37\4\2\0"+
    "\5\4\12\0\3\4\1\0\6\4\1\144\35\4\2\0"+
    "\5\4\12\0\3\4\1\0\5\4\1\145\36\4\2\0"+
    "\5\4\12\0\3\4\1\0\1\4\1\146\42\4\2\0"+
    "\5\4\12\0\3\4\1\0\21\4\1\147\22\4\2\0"+
    "\5\4\12\0\3\4\1\0\40\4\1\150\3\4\2\0"+
    "\5\4\12\0\3\4\1\0\25\4\1\151\16\4\2\0"+
    "\5\4\12\0\3\4\1\0\25\4\1\152\16\4\2\0"+
    "\5\4\12\0\3\4\1\0\26\4\1\153\15\4\2\0"+
    "\5\4\12\0\3\4\1\0\34\4\1\154\7\4\2\0"+
    "\5\4\12\0\3\4\1\0\32\4\1\155\11\4\2\0"+
    "\5\4\12\0\3\4\1\0\31\4\1\156\12\4\2\0"+
    "\5\4\12\0\3\4\1\0\35\4\1\157\6\4\2\0"+
    "\5\4\12\0\3\4\1\0\41\4\1\160\2\4\2\0"+
    "\5\4\12\0\3\4\1\0\25\4\1\161\16\4\2\0"+
    "\5\4\12\0\3\4\1\0\40\4\1\162\3\4\2\0"+
    "\5\4\12\0\3\4\1\0\37\4\1\163\4\4\2\0"+
    "\5\4\12\0\3\4\1\0\44\4\2\0\1\164\4\4"+
    "\12\0\3\4\1\0\31\4\1\165\12\4\2\0\5\4"+
    "\12\0\3\4\1\0\33\4\1\166\10\4\2\0\5\4"+
    "\12\0\3\4\1\0\27\4\1\167\14\4\2\0\5\4"+
    "\12\0\3\4\1\0\20\4\1\170\23\4\2\0\5\4"+
    "\12\0\3\4\1\0\30\4\1\171\13\4\2\0\5\4"+
    "\12\0\3\4\1\0\25\4\1\172\16\4\2\0\5\4"+
    "\12\0\3\4\1\0\33\4\1\173\10\4\2\0\5\4"+
    "\12\0\3\4\1\0\37\4\1\174\4\4\2\0\5\4"+
    "\12\0\3\4\1\0\25\4\1\175\16\4\2\0\5\4"+
    "\12\0\3\4\1\0\1\4\1\176\42\4\2\0\5\4"+
    "\12\0\3\4\1\0\21\4\1\177\22\4\2\0\5\4"+
    "\12\0\3\4\1\0\1\4\1\200\42\4\2\0\5\4"+
    "\12\0\3\4\1\0\5\4\1\201\36\4\2\0\5\4"+
    "\12\0\3\4\1\0\12\4\1\202\31\4\2\0\5\4"+
    "\12\0\3\4\1\0\6\4\1\203\35\4\2\0\5\4"+
    "\12\0\3\4\1\0\15\4\1\204\26\4\2\0\5\4"+
    "\12\0\3\4\1\0\22\4\1\205\21\4\2\0\5\4"+
    "\12\0\3\4\1\0\17\4\1\206\24\4\2\0\5\4"+
    "\12\0\3\4\1\0\26\4\1\207\15\4\2\0\5\4"+
    "\12\0\3\4\1\0\24\4\1\210\17\4\2\0\5\4"+
    "\12\0\3\4\1\0\37\4\1\211\4\4\2\0\5\4"+
    "\12\0\3\4\1\0\25\4\1\212\16\4\2\0\5\4"+
    "\12\0\3\4\1\0\31\4\1\213\12\4\2\0\5\4"+
    "\12\0\3\4\1\0\32\4\1\214\11\4\2\0\5\4"+
    "\12\0\3\4\1\0\20\4\1\215\23\4\2\0\5\4"+
    "\12\0\3\4\1\0\37\4\1\216\4\4\2\0\5\4"+
    "\12\0\3\4\1\0\22\4\1\217\21\4\2\0\5\4"+
    "\12\0\3\4\1\0\35\4\1\220\6\4\2\0\5\4"+
    "\12\0\3\4\1\0\26\4\1\221\15\4\2\0\5\4"+
    "\12\0\3\4\1\0\35\4\1\222\6\4\2\0\5\4"+
    "\12\0\3\4\1\0\24\4\1\223\17\4\2\0\5\4"+
    "\12\0\3\4\1\0\37\4\1\224\4\4\2\0\5\4"+
    "\12\0\3\4\1\0\37\4\1\225\4\4\2\0\5\4"+
    "\12\0\3\4\1\0\31\4\1\226\12\4\2\0\5\4"+
    "\12\0\3\4\1\0\2\4\1\227\41\4\2\0\5\4"+
    "\11\0\1\230\3\231\1\230\44\231\1\232\1\230\5\231"+
    "\1\230\1\0\7\230\1\0\3\4\1\0\30\4\1\233"+
    "\13\4\2\0\5\4\12\0\3\4\1\0\20\4\1\234"+
    "\23\4\2\0\5\4\12\0\3\4\1\0\4\4\1\235"+
    "\37\4\2\0\5\4\12\0\3\4\1\0\3\4\1\236"+
    "\40\4\2\0\5\4\12\0\3\4\1\0\13\4\1\237"+
    "\30\4\2\0\5\4\12\0\3\4\1\0\6\4\1\240"+
    "\35\4\2\0\5\4\12\0\3\4\1\0\1\4\1\241"+
    "\42\4\2\0\5\4\12\0\3\4\1\0\21\4\1\242"+
    "\22\4\2\0\5\4\12\0\3\4\1\0\16\4\1\243"+
    "\25\4\2\0\5\4\12\0\3\4\1\0\21\4\1\244"+
    "\22\4\2\0\5\4\12\0\3\4\1\0\33\4\1\245"+
    "\10\4\2\0\5\4\12\0\3\4\1\0\17\4\1\246"+
    "\24\4\2\0\5\4\12\0\3\4\1\0\35\4\1\247"+
    "\6\4\2\0\5\4\12\0\3\4\1\0\24\4\1\250"+
    "\17\4\2\0\5\4\12\0\3\4\1\0\33\4\1\251"+
    "\10\4\2\0\5\4\12\0\3\4\1\0\37\4\1\252"+
    "\4\4\2\0\5\4\12\0\3\4\1\0\33\4\1\253"+
    "\10\4\2\0\5\4\12\0\3\4\1\0\17\4\1\254"+
    "\24\4\2\0\5\4\12\0\3\4\1\0\25\4\1\255"+
    "\16\4\2\0\5\4\12\0\3\4\1\0\5\4\1\256"+
    "\36\4\2\0\5\4\12\0\3\4\1\0\37\4\1\257"+
    "\4\4\2\0\5\4\12\0\3\4\1\0\40\4\1\260"+
    "\3\4\2\0\5\4\12\0\3\4\1\0\40\4\1\261"+
    "\3\4\2\0\5\4\12\0\3\4\1\0\33\4\1\262"+
    "\10\4\2\0\5\4\12\0\3\4\1\0\27\4\1\263"+
    "\14\4\2\0\5\4\12\0\3\4\1\0\24\4\1\264"+
    "\17\4\2\0\5\4\46\0\1\265\34\0\3\4\1\0"+
    "\30\4\1\266\13\4\2\0\5\4\46\0\1\265\14\0"+
    "\1\267\17\0\3\4\1\0\3\4\1\270\1\271\6\4"+
    "\1\272\30\4\2\0\5\4\12\0\3\4\1\0\30\4"+
    "\1\273\13\4\2\0\5\4\12\0\3\4\1\0\16\4"+
    "\1\274\25\4\2\0\5\4\12\0\3\4\1\0\5\4"+
    "\1\275\36\4\2\0\5\4\12\0\3\4\1\0\1\4"+
    "\1\276\42\4\2\0\5\4\12\0\3\4\1\0\3\4"+
    "\1\277\40\4\2\0\5\4\12\0\3\4\1\0\22\4"+
    "\1\300\21\4\2\0\5\4\12\0\3\4\1\0\12\4"+
    "\1\301\31\4\2\0\5\4\12\0\3\4\1\0\3\4"+
    "\1\302\40\4\2\0\5\4\12\0\3\4\1\0\30\4"+
    "\1\303\13\4\2\0\5\4\12\0\3\4\1\0\34\4"+
    "\1\304\7\4\2\0\5\4\12\0\3\4\1\0\25\4"+
    "\1\305\16\4\2\0\5\4\12\0\3\4\1\0\25\4"+
    "\1\306\16\4\2\0\5\4\12\0\3\4\1\0\33\4"+
    "\1\307\10\4\2\0\5\4\12\0\3\4\1\0\37\4"+
    "\1\310\4\4\2\0\5\4\12\0\3\4\1\0\35\4"+
    "\1\311\6\4\2\0\5\4\12\0\3\4\1\0\33\4"+
    "\1\312\10\4\2\0\5\4\12\0\3\4\1\0\13\4"+
    "\1\313\30\4\2\0\5\4\12\0\3\4\1\0\25\4"+
    "\1\314\16\4\2\0\5\4\12\0\3\4\1\0\25\4"+
    "\1\315\16\4\2\0\5\4\12\0\3\4\1\0\40\4"+
    "\1\316\3\4\2\0\5\4\12\0\3\4\1\0\27\4"+
    "\1\317\14\4\2\0\5\4\12\0\3\4\1\0\25\4"+
    "\1\320\16\4\2\0\5\4\46\0\1\321\34\0\3\4"+
    "\1\0\24\4\1\322\17\4\2\0\5\4\12\0\3\4"+
    "\1\0\31\4\1\323\12\4\2\0\5\4\12\0\3\4"+
    "\1\0\31\4\1\324\12\4\2\0\5\4\12\0\3\4"+
    "\1\0\35\4\1\325\6\4\2\0\5\4\12\0\3\4"+
    "\1\0\7\4\1\326\34\4\2\0\5\4\12\0\3\4"+
    "\1\0\7\4\1\327\34\4\2\0\5\4\12\0\3\4"+
    "\1\0\5\4\1\330\36\4\2\0\5\4\12\0\3\4"+
    "\1\0\21\4\1\331\22\4\2\0\5\4\12\0\3\4"+
    "\1\0\5\4\1\332\36\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\333\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\35\4\1\334\6\4\2\0\5\4\12\0\3\4"+
    "\1\0\26\4\1\335\15\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\336\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\41\4\1\337\2\4\2\0\5\4\12\0\3\4"+
    "\1\0\4\4\1\340\1\341\36\4\2\0\5\4\12\0"+
    "\3\4\1\0\42\4\1\342\1\4\2\0\5\4\12\0"+
    "\3\4\1\0\31\4\1\343\12\4\2\0\5\4\12\0"+
    "\3\4\1\0\20\4\1\344\23\4\2\0\5\4\12\0"+
    "\3\4\1\0\26\4\1\345\15\4\2\0\5\4\12\0"+
    "\3\4\1\0\25\4\1\346\16\4\2\0\5\4\12\0"+
    "\3\4\1\0\17\4\1\347\24\4\2\0\5\4\12\0"+
    "\3\4\1\0\33\4\1\350\10\4\2\0\5\4\12\0"+
    "\3\4\1\0\37\4\1\351\4\4\2\0\5\4\12\0"+
    "\3\4\1\0\32\4\1\352\11\4\2\0\5\4\12\0"+
    "\3\4\1\0\41\4\1\353\2\4\2\0\5\4\12\0"+
    "\3\4\1\0\2\4\1\354\41\4\2\0\5\4\12\0"+
    "\3\4\1\0\10\4\1\355\33\4\2\0\5\4\12\0"+
    "\3\4\1\0\7\4\1\356\34\4\2\0\5\4\12\0"+
    "\3\4\1\0\16\4\1\357\25\4\2\0\5\4\12\0"+
    "\3\4\1\0\7\4\1\360\34\4\2\0\5\4\12\0"+
    "\3\4\1\0\27\4\1\361\14\4\2\0\5\4\12\0"+
    "\3\4\1\0\20\4\1\362\23\4\2\0\5\4\12\0"+
    "\3\4\1\0\30\4\1\363\13\4\2\0\5\4\12\0"+
    "\3\4\1\0\25\4\1\364\16\4\2\0\5\4\12\0"+
    "\3\4\1\0\26\4\1\365\15\4\2\0\5\4\12\0"+
    "\3\4\1\0\17\4\1\366\24\4\2\0\5\4\12\0"+
    "\3\4\1\0\41\4\1\367\2\4\2\0\5\4\12\0"+
    "\3\4\1\0\30\4\1\370\13\4\2\0\5\4\12\0"+
    "\3\4\1\0\4\4\1\371\37\4\2\0\5\4\12\0"+
    "\3\4\1\0\43\4\1\372\2\0\5\4\12\0\3\4"+
    "\1\0\30\4\1\373\13\4\2\0\5\4\12\0\3\4"+
    "\1\0\37\4\1\374\4\4\2\0\5\4\12\0\3\4"+
    "\1\0\41\4\1\375\2\4\2\0\5\4\12\0\3\4"+
    "\1\0\37\4\1\376\4\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\377\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\24\4\1\u0100\17\4\2\0\5\4\12\0\3\4"+
    "\1\0\4\4\1\u0101\37\4\2\0\5\4\12\0\3\4"+
    "\1\0\4\4\1\u0102\37\4\2\0\5\4\12\0\3\4"+
    "\1\0\17\4\1\u0103\24\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u0104\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\42\4\1\u0105\1\4\2\0\5\4\12\0\3\4"+
    "\1\0\40\4\1\u0106\3\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u0107\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u0108\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\37\4\1\u0109\4\4\2\0\5\4\12\0\3\4"+
    "\1\0\37\4\1\u010a\4\4\2\0\5\4\12\0\3\4"+
    "\1\0\33\4\1\u010b\10\4\2\0\5\4\12\0\3\4"+
    "\1\0\40\4\1\u010c\3\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u010d\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\35\4\1\u010e\6\4\2\0\5\4\12\0\3\4"+
    "\1\0\20\4\1\u010f\23\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u0110\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\5\4\1\u0111\36\4\2\0\5\4\12\0\3\4"+
    "\1\0\30\4\1\u0112\13\4\2\0\5\4\12\0\3\4"+
    "\1\0\44\4\2\0\1\4\1\u0113\1\u0114\2\4\12\0"+
    "\3\4\1\0\37\4\1\u0115\4\4\2\0\5\4\12\0"+
    "\3\4\1\0\25\4\1\u0116\16\4\2\0\5\4\12\0"+
    "\3\4\1\0\20\4\1\u0117\23\4\2\0\5\4\12\0"+
    "\3\4\1\0\20\4\1\u0118\23\4\2\0\5\4\12\0"+
    "\3\4\1\0\31\4\1\u0119\12\4\2\0\5\4\12\0"+
    "\3\4\1\0\1\u011a\43\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u011b\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\20\4\1\u011c\23\4\2\0\5\4\12\0\3\4"+
    "\1\0\30\4\1\u011d\13\4\2\0\5\4\12\0\3\4"+
    "\1\0\30\4\1\u011e\13\4\2\0\5\4\12\0\3\4"+
    "\1\0\33\4\1\u011f\10\4\2\0\5\4\12\0\3\4"+
    "\1\0\11\4\1\u0120\32\4\2\0\5\4\12\0\3\4"+
    "\1\0\33\4\1\u0121\10\4\2\0\5\4\12\0\3\4"+
    "\1\0\26\4\1\u0122\15\4\2\0\5\4\12\0\3\4"+
    "\1\0\20\4\1\u0123\23\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u0124\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\30\4\1\u0125\13\4\2\0\5\4\12\0\3\4"+
    "\1\0\40\4\1\u0126\3\4\2\0\5\4\12\0\3\4"+
    "\1\0\31\4\1\u0127\12\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u0128\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\35\4\1\u0129\6\4\2\0\5\4\12\0\3\4"+
    "\1\0\37\4\1\u012a\4\4\2\0\5\4\12\0\3\4"+
    "\1\0\6\4\1\u012b\35\4\2\0\5\4\12\0\3\4"+
    "\1\0\17\4\1\u012c\24\4\2\0\5\4\12\0\3\4"+
    "\1\0\26\4\1\u012d\15\4\2\0\5\4\12\0\3\4"+
    "\1\0\35\4\1\u012e\6\4\2\0\5\4\12\0\3\4"+
    "\1\0\35\4\1\u012f\6\4\2\0\5\4\12\0\3\4"+
    "\1\0\37\4\1\u0130\4\4\2\0\5\4\12\0\3\4"+
    "\1\0\40\4\1\u0131\3\4\2\0\5\4\12\0\3\4"+
    "\1\0\12\4\1\u0132\31\4\2\0\5\4\12\0\3\4"+
    "\1\0\26\4\1\u0133\15\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u0134\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\35\4\1\u0135\6\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u0136\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\1\4\1\u0137\42\4\2\0\5\4\12\0\3\4"+
    "\1\0\40\4\1\u0138\3\4\2\0\5\4\12\0\3\4"+
    "\1\0\24\4\1\u0139\17\4\2\0\5\4\12\0\3\4"+
    "\1\0\40\4\1\u013a\3\4\2\0\5\4\12\0\3\4"+
    "\1\0\3\4\1\u013b\40\4\2\0\5\4\12\0\3\4"+
    "\1\0\17\4\1\u013c\24\4\2\0\5\4\12\0\3\4"+
    "\1\0\37\4\1\u013d\4\4\2\0\5\4\12\0\3\4"+
    "\1\0\37\4\1\u013e\4\4\2\0\5\4\12\0\3\4"+
    "\1\0\5\4\1\u013f\36\4\2\0\5\4\12\0\3\4"+
    "\1\0\27\4\1\u0140\14\4\2\0\5\4\12\0\3\4"+
    "\1\0\26\4\1\u0141\15\4\2\0\5\4\12\0\3\4"+
    "\1\0\26\4\1\u0142\15\4\2\0\5\4\12\0\3\4"+
    "\1\0\7\4\1\u0143\34\4\2\0\5\4\12\0\3\4"+
    "\1\0\25\4\1\u0144\16\4\2\0\5\4\12\0\3\4"+
    "\1\0\26\4\1\u0145\15\4\2\0\5\4\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15903];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\30\1\7\11\1\0\165\1\1\0\1\1"+
    "\1\0\32\1\1\11\1\1\1\0\31\1\1\11\164\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[325];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //coidgo de usuario en sintaxis java
    ArrayList<Error> listaErrores = new  ArrayList<>();
    

    public ArrayList<Error> getListaErrores(){
        return listaErrores;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoR(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public AnalizadorLexicoR(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 164) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("error Lexico: "+"Columna: "+yycolumn+1+" linea: "+ yyline+1 + "Token: "+yytext());
                                    Error error = new Error(yytext(), "Sintactico", "Error Sintaxis token: " + yyline+1 + " " + yycolumn+1 + " " + yytext(), yyline+1, yycolumn+1);
                                    listaErrores.add(error);
          }
        case 56: break;
        case 39: 
          { /*System.out.println("REPETICION");*/ return new Symbol(SimbolosR.REPETICION , yycolumn, yyline, yytext());
          }
        case 57: break;
        case 3: 
          { System.out.println("id: "+yytext()); return new Symbol(SimbolosR.IDENTIFICADOR , yycolumn, yyline, yytext());
          }
        case 58: break;
        case 41: 
          { /*System.out.println("COORDENADA_X");*/ return new Symbol(SimbolosR.COORDENADA_X , yycolumn, yyline, yytext());
          }
        case 59: break;
        case 27: 
          { /*System.out.println("DIFICIL");*/ return new Symbol(SimbolosR.DIFICIL , yycolumn, yyline, yytext());
          }
        case 60: break;
        case 15: 
          { /*System.out.println("TIPO");*/ return new Symbol(SimbolosR.TIPO , yycolumn, yyline, yytext());
          }
        case 61: break;
        case 36: 
          { /*System.out.println("JUGADORES");*/ return new Symbol(SimbolosR.JUGADORES , yycolumn, yyline, yytext());
          }
        case 62: break;
        case 30: 
          { /*System.out.println("MENSAJES");*/ return new Symbol(SimbolosR.MENSAJES , yycolumn, yyline, yytext());
          }
        case 63: break;
        case 4: 
          { System.out.println("NUMERO: "+yytext()); return new Symbol(SimbolosR.NUMERO , yycolumn, yyline, yytext());
          }
        case 64: break;
        case 49: 
          { /*System.out.println("NAVES_ENVIADAS");*/ return new Symbol(SimbolosR.NAVES_ENVIADAS , yycolumn, yyline, yytext());
          }
        case 65: break;
        case 28: 
          { /*System.out.println("DESTINO");*/ return new Symbol(SimbolosR.DESTINO , yycolumn, yyline, yytext());
          }
        case 66: break;
        case 51: 
          { /*System.out.println("JUGADOR");*/ return new Symbol(SimbolosR.JUGADOR , yycolumn, yyline, yytext());
          }
        case 67: break;
        case 50: 
          { /*System.out.println("NOMBRE_JUG");*/ return new Symbol(SimbolosR.NOMBRE_JUG , yycolumn, yyline, yytext());
          }
        case 68: break;
        case 18: 
          { /*System.out.println("FALSE");*/ return new Symbol(SimbolosR.FALSE , yycolumn, yyline, yytext());
          }
        case 69: break;
        case 24: 
          { /*System.out.println("NOMBRE");*/ return new Symbol(SimbolosR.NOMBRE , yycolumn, yyline, yytext());
          }
        case 70: break;
        case 33: 
          { /*System.out.println("COLUMNAS");*/ return new Symbol(SimbolosR.COLUMNAS , yycolumn, yyline, yytext());
          }
        case 71: break;
        case 22: 
          { /*System.out.println("ALAZAR");*/ return new Symbol(SimbolosR.ALAZAR , yycolumn, yyline, yytext());
          }
        case 72: break;
        case 54: 
          { /*System.out.println("PLANETAS_NEUTRALES");*/ return new Symbol(SimbolosR.PLANETAS_NEUTRALES , yycolumn, yyline, yytext());
          }
        case 73: break;
        case 42: 
          { /*System.out.println("COORDENADA_Y");*/ return new Symbol(SimbolosR.COORDENADA_Y , yycolumn, yyline, yytext());
          }
        case 74: break;
        case 11: 
          { /*System.out.println("LLAVES CIEERRE");*/ return new Symbol(SimbolosR.LLAVES_C , yycolumn, yyline, yytext());
          }
        case 75: break;
        case 10: 
          { /*System.out.println("LLAVES ABRE");*/ return new Symbol(SimbolosR.LLAVES_A , yycolumn, yyline, yytext());
          }
        case 76: break;
        case 17: 
          { /*System.out.println("FILAS");*/ return new Symbol(SimbolosR.FILAS , yycolumn, yyline, yytext());
          }
        case 77: break;
        case 46: 
          { /*System.out.println("MOSTRAR_NAVES");*/ return new Symbol(SimbolosR.MOSTRAR_NAVES , yycolumn, yyline, yytext());
          }
        case 78: break;
        case 45: 
          { /*System.out.println("FINALIZACION");*/ return new Symbol(SimbolosR.FINALIZACION , yycolumn, yyline, yytext());
          }
        case 79: break;
        case 6: 
          { /*System.out.println("comillas");*/ return new Symbol(SimbolosR.COMILLAS , yycolumn, yyline, yytext());
          }
        case 80: break;
        case 14: 
          { /*System.out.println("MAPA");*/ return new Symbol(SimbolosR.MAPA , yycolumn, yyline, yytext());
          }
        case 81: break;
        case 52: 
          { /*System.out.println("PLANET_NEU");*/ return new Symbol(SimbolosR.PLANET_NEU , yycolumn, yyline, yytext());
          }
        case 82: break;
        case 26: 
          { /*System.out.println("HUMANO");*/ return new Symbol(SimbolosR.HUMANO , yycolumn, yyline, yytext());
          }
        case 83: break;
        case 44: 
          { /*System.out.println("TURNO_NUMERO");*/ return new Symbol(SimbolosR.TURNO_NUMERO , yycolumn, yyline, yytext());
          }
        case 84: break;
        case 20: 
          { /*System.out.println("TURNO");*/ return new Symbol(SimbolosR.TURNO , yycolumn, yyline, yytext());
          }
        case 85: break;
        case 53: 
          { /*System.out.println("PORCENTAJE_MUERTES");*/ return new Symbol(SimbolosR.PORCENTAJE_MUERTES , yycolumn, yyline, yytext());
          }
        case 86: break;
        case 19: 
          { /*System.out.println("NAVES");*/ return new Symbol(SimbolosR.NAVES , yycolumn, yyline, yytext());
          }
        case 87: break;
        case 31: 
          { /*System.out.println("PLANETAS");*/ return new Symbol(SimbolosR.PLANETAS , yycolumn, yyline, yytext());
          }
        case 88: break;
        case 47: 
          { /*System.out.println("TURNO_LLEGADA");*/ return new Symbol(SimbolosR.TURNO_LLEGADA , yycolumn, yyline, yytext());
          }
        case 89: break;
        case 37: 
          { /*System.out.println("MAPA_CIEGO");*/ return new Symbol(SimbolosR.MAPA_CIEGO , yycolumn, yyline, yytext());
          }
        case 90: break;
        case 55: 
          { /*System.out.println("MOSTRAR_ESTADISTICAS");*/ return new Symbol(SimbolosR.MOSTRAR_ESTADISTICAS , yycolumn, yyline, yytext());
          }
        case 91: break;
        case 38: 
          { /*System.out.println("RESULTADO");*/ return new Symbol(SimbolosR.RESULTADO , yycolumn, yyline, yytext());
          }
        case 92: break;
        case 48: 
          { /*System.out.println("TURNO_JUGADOR");*/ return new Symbol(SimbolosR.TURNO_JUGADOR  , yycolumn, yyline, yytext());
          }
        case 93: break;
        case 8: 
          { /*System.out.println("CHORCHETE ABRE");*/ return new Symbol(SimbolosR.CORCHE_A , yycolumn, yyline, yytext());
          }
        case 94: break;
        case 9: 
          { /*System.out.println("CORCHE CIERRE");*/ return new Symbol(SimbolosR.CORCHE_C , yycolumn, yyline, yytext());
          }
        case 95: break;
        case 23: 
          { /*System.out.println("ORIGEN");*/ return new Symbol(SimbolosR.ORIGEN , yycolumn, yyline, yytext());
          }
        case 96: break;
        case 12: 
          { /*System.out.println("COMA");*/ return new Symbol(SimbolosR.COMA , yycolumn, yyline, yytext());
          }
        case 97: break;
        case 35: 
          { /*System.out.println("NEUTRALES");*/ return new Symbol(SimbolosR.NEUTRALES , yycolumn, yyline, yytext());
          }
        case 98: break;
        case 32: 
          { /*System.out.println("ACUMULAR");*/ return new Symbol(SimbolosR.ACUMULAR , yycolumn, yyline, yytext());
          }
        case 99: break;
        case 21: 
          { /*System.out.println("FACIL");*/ return new Symbol(SimbolosR.FACIL , yycolumn, yyline, yytext());
          }
        case 100: break;
        case 7: 
          { /*System.out.println("dos puntos");*/ return new Symbol(SimbolosR.DOS_PUNTOS , yycolumn, yyline, yytext());
          }
        case 101: break;
        case 2: 
          { System.out.println("texto: "+yytext()); return new Symbol(SimbolosR.PALABRA , yycolumn, yyline, yytext());
          }
        case 102: break;
        case 43: 
          { /*System.out.println("TIPOPLANETA");*/ return new Symbol(SimbolosR.TIPOPLANETA , yycolumn, yyline, yytext());
          }
        case 103: break;
        case 34: 
          { /*System.out.println("PLANETAS_JUGADOR");*/ return new Symbol(SimbolosR.PLANETAS_JUGADOR , yycolumn, yyline, yytext());
          }
        case 104: break;
        case 13: 
          { /*System.out.println("ID");*/ return new Symbol(SimbolosR.ID , yycolumn, yyline, yytext());
          }
        case 105: break;
        case 16: 
          { /*System.out.println("TRUE");*/ return new Symbol(SimbolosR.TRUE , yycolumn, yyline, yytext());
          }
        case 106: break;
        case 5: 
          { /*Ignore*/
          }
        case 107: break;
        case 25: 
          { /*System.out.println("TAMANO");*/ return new Symbol(SimbolosR.TAMANO , yycolumn, yyline, yytext());
          }
        case 108: break;
        case 29: 
          { /*System.out.println("TAMAÑO");*/ return new Symbol(SimbolosR.TAMANO , yycolumn, yyline, yytext());
          }
        case 109: break;
        case 40: 
          { /*System.out.println("PRODUCCION");*/ return new Symbol(SimbolosR.PRODUCCION , yycolumn, yyline, yytext());
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SimbolosR.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
