//codigo usuario
package analizadores;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import objetos.Mapa;
import objetos.Planeta;
import objetos.Jugador;
import manejadores.*;
import objetos.Juego;
import objetos.Error;

//Codigo para el parser, variables, metodos
parser code
{:
    Juego juego;
    Mapa mapa;
    ManejadorMapa manejadorMapa;
    ArrayList<Planeta> listaPlanetas;
    ArrayList<Planeta> listaPlanetasNeutrales;
    ArrayList<Jugador> listaJugadores;
    ArrayList<Error> listaErrores = new  ArrayList<>();

    public void setAtributos(ManejadorMapa manejadorMapa, Mapa mapa, ArrayList<Planeta> listaPlanetas, ArrayList<Planeta> listaPlanetasNeutrales, ArrayList<Jugador> listaJugadores){
        this.mapa = mapa;
        this.manejadorMapa = manejadorMapa;
        this.listaPlanetas = listaPlanetas;
        this.listaPlanetasNeutrales = listaPlanetasNeutrales;
        this.listaJugadores = listaJugadores;
        
    }
    public void setJuego(){
        juego = new Juego(mapa,manejadorMapa,listaPlanetas,listaPlanetasNeutrales,listaJugadores);
    }

    public Juego getJuego(){
        return juego;
    }

    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                Error e = new Error((String) s.value, "Sintactico", "Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, s.right, s.left);
                listaErrores.add(e);
                //escribirErrores(e);
                setAccion("ERROR","Error Sintaxis token: Linea: " + (s.right+1) + ",   Columna: " + (s.left+1) + ",  Simbolo: " + s.value, "");
            }
    }

:}

//Coidgo para las acciones gramaticales

action code
{:
    Mapa mapa = null;
    ArrayList<Planeta> listaPlanetas = new ArrayList<>();
    ArrayList<Planeta> listaPlanetasNeutrales = new ArrayList<>();
    ArrayList<Jugador> listaJugadores = new ArrayList<>();
    ManejadorMapa manejadorMapa = null;
    ManejadorPlanetas manejadorPlanetas = new ManejadorPlanetas();
    ManejadorJugador manejadorJugador = new ManejadorJugador();
    Planeta p;
    Jugador jugador;
:}

//Declaraciones 
terminal CORCHE_A, CORCHE_C, DOS_PUNTOS, COMA, COMILLAS, LLAVES_A, LLAVES_C;
terminal MAPA, PLANETAS, PLANETAS_NEUTRALES, JUGADORES;
terminal ID,TAMANO,FILAS,COLUMNAS, ALAZAR, PLANET_NEU, MAPA_CIEGO, ACUMULAR, NEUTRALES, MOSTRAR_NAVES, MOSTRAR_ESTADISTICAS, PRODUCCION, FINALIZACION, IDENTIFICADOR,NUMERO;
terminal NOMBRE, NAVES, PORCENTAJE_MUERTES, NICK_NAME,PALABRA;
terminal PLANETAS_JUGADOR, TIPO, HUMANO, FACIL, DIFICIL;
terminal TRUE, FALSE;

// declaracion no terminales
non terminal INICIO, S0, S1, S2, S3, S4, S5, S6, S7, S8, S9, S10, S11, S12, S13, S14;
non terminal ESTRUCTURA_MAPA, DIMENSION, BOLEANO, ATRIB_NEU, ESTRUCTURA_PLANETAS, ESTRUCTURA_PLANT_NEU, ATRIB_PLANETAS, ESTRUCTURA_JUGADORES, ATRIB_JUGADORES, PLANET_ASIG, DIFICULTADES, MAPA_FIN;
non terminal ATN1, ATN2, ATN3, ATN4, ATN5, ATN6;
non terminal ATP1, ATP2, ATP3, ATP4, ATP5, ATP6, ATP7, ATP8, ATP9, ATP10, ATP11, ATP12, ATP13, ATP14;
non terminal ATJ1, ATJ2, ATJ3, ATJ4, ATJ5, ATJ6;

//presedencia de menor a mayor
//precedence left NOMBRE, PALABRA;


start with INICIO;

//Reglas Semanticas

INICIO ::=  LLAVES_A S0 LLAVES_C {: parser.setAtributos(manejadorMapa, mapa, listaPlanetas, listaPlanetasNeutrales, listaJugadores); parser.setJuego();:}
            |error:e LLAVES_C {:parser.syntax_error((Symbol)e);:};

S0 ::= 	 MAPA DOS_PUNTOS LLAVES_A {: mapa = new Mapa(); manejadorMapa = new ManejadorMapa();:} ESTRUCTURA_MAPA LLAVES_C COMA S1
        |PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S2
	|PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S3
	|JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S4
        |error:e S0 {:parser.syntax_error((Symbol)e);:};

S1 ::=   PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S5
        |PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S6
        |JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S7;

S5 ::=   PLANETAS_NEUTRALES {:System.out.println("entroooo"); :} DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S8
        |JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S9;

S6 ::= 	 PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S8
        |JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S10;

S7 ::=   PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S9
        |PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A CORCHE_C COMA S10;

S8 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C;

S9 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C;

S10 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C;

S2 ::=   MAPA DOS_PUNTOS LLAVES_A {: mapa = new Mapa(); manejadorMapa = new ManejadorMapa();:} ESTRUCTURA_MAPA LLAVES_C COMA S5  
        |PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S11
	|JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S12;

S11 ::=  MAPA DOS_PUNTOS LLAVES_A {: mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); :} ESTRUCTURA_MAPA LLAVES_C COMA S8  
        |JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S13;

S12 ::=  MAPA DOS_PUNTOS LLAVES_A {: mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); :} ESTRUCTURA_MAPA LLAVES_C COMA S9  
        |PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S13;

S13 ::= MAPA DOS_PUNTOS LLAVES_A {: mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); :} ESTRUCTURA_MAPA LLAVES_C;

S3 ::=   MAPA DOS_PUNTOS LLAVES_A {: mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); :} ESTRUCTURA_MAPA LLAVES_C COMA S6
	|PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S11  
	|JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S14;

S14 ::=  MAPA DOS_PUNTOS LLAVES_A {: mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); :} ESTRUCTURA_MAPA LLAVES_C COMA S10
        |PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S13;

S4 ::=   MAPA DOS_PUNTOS LLAVES_A {: mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); :} ESTRUCTURA_MAPA LLAVES_C COMA S7
        |PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S12
	|PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S14;

ESTRUCTURA_MAPA ::=  ID DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {: 
                    if(!manejadorMapa.isExiste(1)){
                        mapa.setId((String) a);
                    }else{
                        parser.syntax_error((Symbol)a);
                    }
:} MAPA_FIN 
                    |TAMANO DOS_PUNTOS LLAVES_A DIMENSION LLAVES_C MAPA_FIN
                    |ALAZAR DOS_PUNTOS BOLEANO:b {: 
                    if(!manejadorMapa.isExiste(3)){
                        mapa.setAlAzar((boolean) b);
                    }else{
                        parser.syntax_error((Symbol)b);
                    }
:} MAPA_FIN
                    |PLANET_NEU DOS_PUNTOS NUMERO:n {: 
                    if(!manejadorMapa.isExiste(4)){
                        mapa.setPlanetasNeutrales(Integer.parseInt((String) n));
                    }else{
                        parser.syntax_error((Symbol)n);
                    }
:} MAPA_FIN
                    |MAPA_CIEGO DOS_PUNTOS BOLEANO:b {: 
                    if(!manejadorMapa.isExiste(5)){
                        mapa.setMapaCiego((boolean) b);
                    }else{
                        parser.syntax_error((Symbol)b);
                    }
:} MAPA_FIN
                    |ACUMULAR DOS_PUNTOS BOLEANO:b {: 
                    if(!manejadorMapa.isExiste(6)){
                        mapa.setAcumular((boolean) b);
                    }else{
                        parser.syntax_error((Symbol)b);
                    }
:} MAPA_FIN
                    |NEUTRALES DOS_PUNTOS LLAVES_A ATRIB_NEU LLAVES_C {: 
                    if(!manejadorMapa.isExiste(7)){
                        
                    }else{
                        
                    }
:} MAPA_FIN
                    |FINALIZACION DOS_PUNTOS NUMERO:n {: 
                    if(!manejadorMapa.isExiste(8)){
                        mapa.setFinalizacion(Integer.parseInt((String) n));
                    }else{
                        parser.syntax_error((Symbol)n);
                    }
:} MAPA_FIN
                    |error:e ESTRUCTURA_MAPA {:parser.syntax_error((Symbol)e);:};

MAPA_FIN ::= COMA ESTRUCTURA_MAPA
            |;

DIMENSION ::=    FILAS DOS_PUNTOS NUMERO:x COMA COLUMNAS DOS_PUNTOS NUMERO:y {: 
                    if(!manejadorMapa.isExiste(2)){
                        mapa.setTamanioX(Integer.parseInt((String) x));
                        mapa.setTamanioY(Integer.parseInt((String) y));
                    }
:}
                |COLUMNAS DOS_PUNTOS NUMERO:y COMA FILAS DOS_PUNTOS NUMERO:x {: 
                    if(!manejadorMapa.isExiste(2)){
                        mapa.setTamanioX(Integer.parseInt((String) x));
                        mapa.setTamanioY(Integer.parseInt((String) y));
                    }
:};


BOLEANO ::=  TRUE {:RESULT = true;:}
            |FALSE {:RESULT = false;:};

ATRIB_NEU ::=  	 MOSTRAR_NAVES DOS_PUNTOS BOLEANO:b {:mapa.setMostrarNavesNeutrales((boolean) b);:} COMA ATN1
                |MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO:b {:mapa.setMostrarEstadisticasNeutrales((boolean) b);:} COMA ATN2
		|PRODUCCION DOS_PUNTOS NUMERO:n {:mapa.setProduccionNeutrales(Integer.parseInt((String) n));:} COMA ATN3
                |error:e ESTRUCTURA_MAPA {:parser.syntax_error((Symbol)e);:};

ATN1 ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO:b {:mapa.setMostrarEstadisticasNeutrales((boolean) b);:} COMA ATN4
	|PRODUCCION DOS_PUNTOS NUMERO:n {:mapa.setProduccionNeutrales(Integer.parseInt((String) n));:} COMA ATN5;

ATN2 ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO:b {:mapa.setMostrarNavesNeutrales((boolean) b);:} COMA ATN4
	|PRODUCCION DOS_PUNTOS NUMERO:n {:mapa.setProduccionNeutrales(Integer.parseInt((String) n));:} COMA ATN6;


ATN3 ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO:b {:mapa.setMostrarNavesNeutrales((boolean) b);:} COMA ATN5
	|MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO:b {:mapa.setMostrarEstadisticasNeutrales((boolean) b);:} COMA ATN6;


ATN4 ::= PRODUCCION DOS_PUNTOS NUMERO:n {:mapa.setProduccionNeutrales(Integer.parseInt((String) n));:};


ATN5 ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO:b {:mapa.setMostrarEstadisticasNeutrales((boolean) b);:};


ATN6 ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO:b {:mapa.setMostrarNavesNeutrales((boolean) b);:};




ESTRUCTURA_PLANETAS ::=  LLAVES_A ATRIB_PLANETAS LLAVES_C {:
            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                if(manejadorPlanetas.isProduccion(p)){
                    p.setTipo(1);
                    listaPlanetas.add(p);
                }
            }:} COMA ESTRUCTURA_PLANETAS
			|LLAVES_A ATRIB_PLANETAS LLAVES_C {:
            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                if(manejadorPlanetas.isProduccion(p)){
                    p.setTipo(1);
                    listaPlanetas.add(p);
                }
            }:}
                        |error:e ESTRUCTURA_PLANETAS {:parser.syntax_error((Symbol)e);:};

ESTRUCTURA_PLANT_NEU ::= LLAVES_A ATRIB_PLANETAS LLAVES_C {: 
            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                p.setTipo(0);
                listaPlanetasNeutrales.add(p);
            }
:} COMA ESTRUCTURA_PLANT_NEU
			|LLAVES_A ATRIB_PLANETAS LLAVES_C {: 
                        if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                            p.setTipo(0);
                            listaPlanetasNeutrales.add(p);
                        }
                    :}
                        |error:e ESTRUCTURA_PLANT_NEU {:parser.syntax_error((Symbol)e);:};

ATRIB_PLANETAS ::=   NOMBRE {:p = new Planeta();:} DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null); parser.syntax_error((Symbol)a);}:} COMA ATP1

                    |NAVES {:p = new Planeta();:} DOS_PUNTOS NUMERO:n {:p.setNaves(Integer.parseInt((String) n));:} COMA ATP2
                    |PRODUCCION {:p = new Planeta();:} DOS_PUNTOS NUMERO:n {:p.setProduccion(Integer.parseInt((String) n));:} COMA ATP3
                    |PORCENTAJE_MUERTES {:p = new Planeta();:} DOS_PUNTOS NUMERO:n {:p.setPorcentajeMuertes(Double.parseDouble((String) n));:} COMA ATP4;
                    

ATP1 ::= NAVES DOS_PUNTOS NUMERO:n {:p.setNaves(Integer.parseInt((String) n));:} COMA ATP5
        |PRODUCCION DOS_PUNTOS NUMERO:n {:p.setProduccion(Integer.parseInt((String) n));:} COMA ATP6
	|PORCENTAJE_MUERTES DOS_PUNTOS NUMERO:n {:p.setPorcentajeMuertes(Double.parseDouble((String) n));:} COMA ATP7 ;

ATP2 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null); parser.syntax_error((Symbol)a);}:} COMA ATP5
        |PRODUCCION DOS_PUNTOS NUMERO:n {:p.setProduccion(Integer.parseInt((String) n));:} COMA ATP11
	|PORCENTAJE_MUERTES DOS_PUNTOS NUMERO:n {:p.setPorcentajeMuertes(Double.parseDouble((String) n));:} COMA ATP12 ;

ATP3 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null); parser.syntax_error((Symbol)a);}:} COMA ATP6
            |NAVES DOS_PUNTOS NUMERO:n {:p.setNaves(Integer.parseInt((String) n));:} COMA ATP11
            |PORCENTAJE_MUERTES DOS_PUNTOS NUMERO:n {:p.setPorcentajeMuertes(Double.parseDouble((String) n));:} COMA ATP14 ;


ATP4 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null); parser.syntax_error((Symbol)a);}:} COMA ATP7
	|NAVES DOS_PUNTOS NUMERO:n {:p.setNaves(Integer.parseInt((String) n));:} COMA ATP12
	|PRODUCCION DOS_PUNTOS NUMERO:n {:p.setProduccion(Integer.parseInt((String) n));:} COMA ATP14;


ATP5 ::= PRODUCCION DOS_PUNTOS NUMERO:n {:p.setProduccion(Integer.parseInt((String) n));:} COMA ATP8
	|PORCENTAJE_MUERTES DOS_PUNTOS NUMERO:n {:p.setPorcentajeMuertes(Double.parseDouble((String) n));:} COMA ATP9 ;

ATP6 ::= NAVES DOS_PUNTOS NUMERO:n {:p.setNaves(Integer.parseInt((String) n));:} COMA ATP8
        |PORCENTAJE_MUERTES DOS_PUNTOS NUMERO:n {:p.setPorcentajeMuertes(Double.parseDouble((String) n));:} COMA ATP10 ;

ATP7 ::= NAVES DOS_PUNTOS NUMERO:n {:p.setNaves(Integer.parseInt((String) n));:} COMA ATP9
	|PRODUCCION DOS_PUNTOS NUMERO:n {:p.setProduccion(Integer.parseInt((String) n));:} COMA ATP10;

ATP8 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO:n {:p.setPorcentajeMuertes(Double.parseDouble((String) n));:};

ATP9 ::= PRODUCCION DOS_PUNTOS NUMERO:n {:p.setProduccion(Integer.parseInt((String) n));    
            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                listaPlanetas.add(p);
            }
:}
        | ;
ATP10 ::= NAVES DOS_PUNTOS NUMERO:n {:p.setNaves(Integer.parseInt((String) n));    
            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                listaPlanetas.add(p);
            }
:};

ATP11 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null); parser.syntax_error((Symbol)a);}:} COMA ATP8
         |PORCENTAJE_MUERTES DOS_PUNTOS NUMERO:n {:p.setPorcentajeMuertes(Double.parseDouble((String) n));:} COMA ATP13 ;

ATP12 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null); parser.syntax_error((Symbol)a);}:} COMA ATP9
         |PRODUCCION DOS_PUNTOS NUMERO:n {:p.setProduccion(Integer.parseInt((String) n));:} COMA ATP13;

ATP13 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null); parser.syntax_error((Symbol)a);}    

                    if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                        listaPlanetas.add(p);
                    }
:};

ATP14 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null); parser.syntax_error((Symbol)a);}:} COMA ATP10
         |NAVES DOS_PUNTOS NUMERO:n {:p.setNaves(Integer.parseInt((String) n));:} COMA ATP13;









ESTRUCTURA_JUGADORES ::= LLAVES_A ATRIB_JUGADORES LLAVES_C {:
                            if(jugador.getNombre()!=null){
                                if(manejadorJugador.isExistJugador(listaJugadores,jugador)){
                                    listaJugadores.add(jugador);
                                }
                            }
:} COMA ESTRUCTURA_JUGADORES
			|LLAVES_A ATRIB_JUGADORES LLAVES_C {:
                            if(jugador.getNombre()!=null){
                                listaJugadores.add(jugador);
                            }
:}
                        |error:e ESTRUCTURA_JUGADORES {:parser.syntax_error((Symbol)e);:};

ATRIB_JUGADORES ::= NOMBRE {:jugador = new Jugador();:} DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                        if(manejadorJugador.isCorrecto((String) a)){
                            jugador.setNombre((String) a);
                        }else{parser.syntax_error((Symbol)a);}
:} COMA ATJ1
		    |PLANETAS_JUGADOR {:jugador = new Jugador();:} DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C COMA ATJ2
		    |TIPO {:jugador = new Jugador();:} DOS_PUNTOS DIFICULTADES:n {:jugador.setTipo(Integer.parseInt(n.toString()));:} COMA ATJ3;

ATJ1 ::= PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C COMA ATJ4
        |TIPO DOS_PUNTOS DIFICULTADES:n {:jugador.setTipo(Integer.parseInt(n.toString()));:} COMA ATJ5;

ATJ2 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                        if(manejadorJugador.isCorrecto((String) a)){
                            jugador.setNombre((String) a);
                        }else{parser.syntax_error((Symbol)a);}
:} COMA ATJ4
        |TIPO DOS_PUNTOS DIFICULTADES:n {:jugador.setTipo(Integer.parseInt(n.toString()));:} COMA ATJ6;

ATJ3 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                        if(manejadorJugador.isCorrecto((String) a)){
                            jugador.setNombre((String) a);
                        }else{parser.syntax_error((Symbol)a);}
:} COMA ATJ5
        |PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C COMA ATJ6;

ATJ4 ::= TIPO DOS_PUNTOS DIFICULTADES:n {:jugador.setTipo(Integer.parseInt(n.toString()));:} ;

ATJ5 ::= PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C;

ATJ6 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR:a COMILLAS {:
                        if(manejadorJugador.isCorrecto((String) a)){
                            jugador.setNombre((String) a);
                        }else{parser.syntax_error((Symbol)a);}
:};

PLANET_ASIG ::=  COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        jugador.insertarPlaneta((String) a);
                    }else{parser.syntax_error((Symbol)a);}:} COMA PLANET_ASIG
                |COMILLAS IDENTIFICADOR:a COMILLAS {:
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        jugador.insertarPlaneta((String) a);
                    }else{parser.syntax_error((Symbol)a);}:};

DIFICULTADES ::= HUMANO {:RESULT=0;:}
		|FACIL {:RESULT=1;:}
		|DIFICIL {:RESULT=2;:};