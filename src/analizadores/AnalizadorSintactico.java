
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Mar 15 22:32:58 CST 2020
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import objetos.Mapa;
import objetos.Planeta;
import objetos.Jugador;
import manejadores.*;
import objetos.Juego;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Mar 15 22:32:58 CST 2020
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\274\000\002\002\004\000\002\002\005\000\002\070" +
    "\002\000\002\003\012\000\002\003\011\000\002\003\011" +
    "\000\002\003\011\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\071\002\000\002\010\012\000\002" +
    "\010\011\000\002\011\011\000\002\011\011\000\002\012" +
    "\011\000\002\012\010\000\002\013\007\000\002\014\007" +
    "\000\002\015\007\000\002\072\002\000\002\005\012\000" +
    "\002\005\011\000\002\005\011\000\002\073\002\000\002" +
    "\016\012\000\002\016\011\000\002\074\002\000\002\017" +
    "\012\000\002\017\011\000\002\075\002\000\002\020\010" +
    "\000\002\076\002\000\002\006\012\000\002\006\011\000" +
    "\002\006\011\000\002\077\002\000\002\021\012\000\002" +
    "\021\011\000\002\100\002\000\002\007\012\000\002\007" +
    "\011\000\002\007\011\000\002\101\002\000\002\022\011" +
    "\000\002\022\010\000\002\102\002\000\002\022\007\000" +
    "\002\103\002\000\002\022\007\000\002\104\002\000\002" +
    "\022\007\000\002\105\002\000\002\022\007\000\002\106" +
    "\002\000\002\022\011\000\002\107\002\000\002\022\007" +
    "\000\002\022\004\000\002\035\004\000\002\035\002\000" +
    "\002\023\011\000\002\023\011\000\002\024\003\000\002" +
    "\024\003\000\002\110\002\000\002\025\010\000\002\111" +
    "\002\000\002\025\010\000\002\112\002\000\002\025\010" +
    "\000\002\025\004\000\002\113\002\000\002\036\010\000" +
    "\002\114\002\000\002\036\010\000\002\115\002\000\002" +
    "\037\010\000\002\116\002\000\002\037\010\000\002\117" +
    "\002\000\002\040\010\000\002\120\002\000\002\040\010" +
    "\000\002\041\005\000\002\042\005\000\002\043\005\000" +
    "\002\121\002\000\002\026\010\000\002\026\005\000\002" +
    "\122\002\000\002\027\010\000\002\027\005\000\002\123" +
    "\002\000\002\124\002\000\002\030\013\000\002\125\002" +
    "\000\002\126\002\000\002\030\011\000\002\127\002\000" +
    "\002\130\002\000\002\030\011\000\002\131\002\000\002" +
    "\132\002\000\002\030\011\000\002\133\002\000\002\044" +
    "\010\000\002\134\002\000\002\044\010\000\002\135\002" +
    "\000\002\044\010\000\002\136\002\000\002\045\012\000" +
    "\002\137\002\000\002\045\010\000\002\140\002\000\002" +
    "\045\010\000\002\141\002\000\002\046\012\000\002\142" +
    "\002\000\002\046\010\000\002\143\002\000\002\046\010" +
    "\000\002\144\002\000\002\047\012\000\002\145\002\000" +
    "\002\047\010\000\002\146\002\000\002\047\010\000\002" +
    "\147\002\000\002\050\010\000\002\150\002\000\002\050" +
    "\010\000\002\151\002\000\002\051\010\000\002\152\002" +
    "\000\002\051\010\000\002\153\002\000\002\052\010\000" +
    "\002\154\002\000\002\052\010\000\002\053\005\000\002" +
    "\054\005\000\002\054\002\000\002\055\005\000\002\155" +
    "\002\000\002\056\012\000\002\156\002\000\002\056\010" +
    "\000\002\157\002\000\002\057\012\000\002\160\002\000" +
    "\002\057\010\000\002\060\007\000\002\161\002\000\002" +
    "\061\012\000\002\162\002\000\002\061\010\000\002\163" +
    "\002\000\002\031\010\000\002\031\005\000\002\164\002" +
    "\000\002\165\002\000\002\032\013\000\002\166\002\000" +
    "\002\032\012\000\002\167\002\000\002\170\002\000\002" +
    "\032\011\000\002\062\011\000\002\171\002\000\002\062" +
    "\010\000\002\172\002\000\002\063\012\000\002\173\002" +
    "\000\002\063\010\000\002\174\002\000\002\064\012\000" +
    "\002\064\011\000\002\065\005\000\002\066\007\000\002" +
    "\067\007\000\002\175\002\000\002\033\010\000\002\033" +
    "\005\000\002\034\003\000\002\034\003\000\002\034\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u029a\000\004\011\004\001\002\000\012\013\013\014" +
    "\007\015\012\016\010\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\004\006\u0281\001\002\000" +
    "\004\006\u0256\001\002\000\004\012\u0255\001\002\000\004" +
    "\006\u0215\001\002\000\004\006\014\001\002\000\004\011" +
    "\015\001\002\000\024\003\uffff\017\uffff\020\uffff\023\uffff" +
    "\024\uffff\025\uffff\026\uffff\027\uffff\033\uffff\001\002\000" +
    "\024\003\026\017\025\020\024\023\022\024\023\025\027" +
    "\026\017\027\030\033\021\001\002\000\004\006\u0211\001" +
    "\002\000\004\012\216\001\002\000\004\006\212\001\002" +
    "\000\004\006\206\001\002\000\004\006\202\001\002\000" +
    "\004\006\157\001\002\000\004\006\151\001\002\000\024" +
    "\003\026\017\025\020\024\023\022\024\023\025\027\026" +
    "\017\027\030\033\021\001\002\000\004\006\144\001\002" +
    "\000\004\006\031\001\002\000\004\011\032\001\002\000" +
    "\012\003\035\030\036\031\037\032\033\001\002\000\004" +
    "\006\123\001\002\000\004\012\116\001\002\000\024\003" +
    "\026\017\025\020\024\023\022\024\023\025\027\026\017" +
    "\027\030\033\021\001\002\000\004\006\071\001\002\000" +
    "\004\006\040\001\002\000\006\050\041\051\042\001\002" +
    "\000\006\007\uffc2\012\uffc2\001\002\000\006\007\uffc1\012" +
    "\uffc1\001\002\000\004\007\uffbe\001\002\000\004\007\045" +
    "\001\002\000\006\030\050\032\046\001\002\000\004\006" +
    "\061\001\002\000\004\012\uffbd\001\002\000\004\006\051" +
    "\001\002\000\006\050\041\051\042\001\002\000\004\007" +
    "\uffb5\001\002\000\004\007\054\001\002\000\004\032\055" +
    "\001\002\000\004\006\057\001\002\000\004\012\uffb4\001" +
    "\002\000\004\035\060\001\002\000\004\012\uffad\001\002" +
    "\000\004\035\062\001\002\000\004\007\uffb3\001\002\000" +
    "\004\007\064\001\002\000\004\030\065\001\002\000\004" +
    "\006\067\001\002\000\004\012\uffb2\001\002\000\006\050" +
    "\041\051\042\001\002\000\004\012\uffab\001\002\000\006" +
    "\050\041\051\042\001\002\000\004\007\uffc0\001\002\000" +
    "\004\007\074\001\002\000\006\031\077\032\075\001\002" +
    "\000\004\006\105\001\002\000\004\012\uffbf\001\002\000" +
    "\004\006\100\001\002\000\006\050\041\051\042\001\002" +
    "\000\004\007\uffb9\001\002\000\004\007\103\001\002\000" +
    "\004\032\055\001\002\000\004\012\uffb8\001\002\000\004" +
    "\035\106\001\002\000\004\007\uffb7\001\002\000\004\007" +
    "\110\001\002\000\004\031\112\001\002\000\004\012\uffb6" +
    "\001\002\000\004\006\113\001\002\000\006\050\041\051" +
    "\042\001\002\000\004\012\uffac\001\002\000\004\012\uffba" +
    "\001\002\000\006\007\uffcb\012\uffcb\001\002\000\006\007" +
    "\120\012\uffc5\001\002\000\024\003\026\017\025\020\024" +
    "\023\022\024\023\025\027\026\017\027\030\033\021\001" +
    "\002\000\004\012\uffca\001\002\000\004\012\uffc6\001\002" +
    "\000\004\035\124\001\002\000\004\007\uffbc\001\002\000" +
    "\004\007\126\001\002\000\006\030\130\031\131\001\002" +
    "\000\004\012\uffbb\001\002\000\004\006\137\001\002\000" +
    "\004\006\132\001\002\000\006\050\041\051\042\001\002" +
    "\000\004\007\uffaf\001\002\000\004\007\135\001\002\000" +
    "\004\030\065\001\002\000\004\012\uffae\001\002\000\006" +
    "\050\041\051\042\001\002\000\004\007\uffb1\001\002\000" +
    "\004\007\142\001\002\000\004\031\112\001\002\000\004" +
    "\012\uffb0\001\002\000\006\050\041\051\042\001\002\000" +
    "\006\007\uffcf\012\uffcf\001\002\000\006\007\120\012\uffc5" +
    "\001\002\000\004\012\uffce\001\002\000\004\012\uffc7\001" +
    "\002\000\004\010\152\001\002\000\004\034\153\001\002" +
    "\000\004\010\154\001\002\000\006\007\uffd6\012\uffd6\001" +
    "\002\000\006\007\120\012\uffc5\001\002\000\004\012\uffd5" +
    "\001\002\000\004\011\160\001\002\000\006\021\163\022" +
    "\162\001\002\000\004\012\200\001\002\000\004\006\172" +
    "\001\002\000\004\006\164\001\002\000\004\035\165\001" +
    "\002\000\004\007\166\001\002\000\004\022\167\001\002" +
    "\000\004\006\170\001\002\000\004\035\171\001\002\000" +
    "\004\012\uffc4\001\002\000\004\035\173\001\002\000\004" +
    "\007\174\001\002\000\004\021\175\001\002\000\004\006" +
    "\176\001\002\000\004\035\177\001\002\000\004\012\uffc3" +
    "\001\002\000\006\007\120\012\uffc5\001\002\000\004\012" +
    "\uffd4\001\002\000\004\035\203\001\002\000\006\007\uffd1" +
    "\012\uffd1\001\002\000\006\007\120\012\uffc5\001\002\000" +
    "\004\012\uffd0\001\002\000\006\050\041\051\042\001\002" +
    "\000\006\007\uffd3\012\uffd3\001\002\000\006\007\120\012" +
    "\uffc5\001\002\000\004\012\uffd2\001\002\000\004\035\213" +
    "\001\002\000\006\007\uffc9\012\uffc9\001\002\000\006\007" +
    "\120\012\uffc5\001\002\000\004\012\uffc8\001\002\000\004" +
    "\007\217\001\002\000\010\014\220\015\223\016\221\001" +
    "\002\000\004\006\u01fc\001\002\000\004\006\u01e4\001\002" +
    "\000\004\012\ufffe\001\002\000\004\006\224\001\002\000" +
    "\004\004\225\001\002\000\004\011\226\001\002\000\012" +
    "\032\252\036\256\037\254\040\253\001\002\000\004\005" +
    "\230\001\002\000\004\007\231\001\002\000\006\014\233" +
    "\016\234\001\002\000\004\012\ufff9\001\002\000\004\006" +
    "\u01d4\001\002\000\004\006\235\001\002\000\004\004\236" +
    "\001\002\000\004\011\237\001\002\000\010\036\u0179\043" +
    "\u0178\044\u017a\001\002\000\004\005\241\001\002\000\004" +
    "\007\242\001\002\000\004\014\244\001\002\000\004\012" +
    "\ufff3\001\002\000\004\006\245\001\002\000\004\004\246" +
    "\001\002\000\004\011\247\001\002\000\012\032\252\036" +
    "\256\037\254\040\253\001\002\000\004\005\251\001\002" +
    "\000\004\012\uffee\001\002\000\004\006\uff9e\001\002\000" +
    "\004\006\uff9b\001\002\000\004\006\uffa1\001\002\000\004" +
    "\012\366\001\002\000\004\006\uffa4\001\002\000\004\006" +
    "\260\001\002\000\004\010\261\001\002\000\004\034\262" +
    "\001\002\000\004\010\263\001\002\000\004\007\uffa3\001" +
    "\002\000\004\007\265\001\002\000\010\032\266\037\270" +
    "\040\267\001\002\000\004\006\345\001\002\000\004\006" +
    "\321\001\002\000\004\006\272\001\002\000\004\012\uffa2" +
    "\001\002\000\004\035\273\001\002\000\004\007\uff98\001" +
    "\002\000\004\007\275\001\002\000\006\032\276\040\277" +
    "\001\002\000\004\006\311\001\002\000\004\006\301\001" +
    "\002\000\004\012\uff97\001\002\000\004\035\302\001\002" +
    "\000\004\007\uff7e\001\002\000\004\007\304\001\002\000" +
    "\006\012\uff72\032\306\001\002\000\004\012\uff7d\001\002" +
    "\000\004\006\307\001\002\000\004\035\310\001\002\000" +
    "\004\012\uff73\001\002\000\004\035\312\001\002\000\004" +
    "\007\uff80\001\002\000\004\007\314\001\002\000\004\040" +
    "\315\001\002\000\004\006\317\001\002\000\004\012\uff7f" +
    "\001\002\000\004\035\320\001\002\000\004\012\uff74\001" +
    "\002\000\004\035\322\001\002\000\004\007\uff94\001\002" +
    "\000\004\007\324\001\002\000\006\032\325\037\327\001" +
    "\002\000\004\006\335\001\002\000\004\012\uff93\001\002" +
    "\000\004\006\330\001\002\000\004\035\331\001\002\000" +
    "\004\007\uff78\001\002\000\004\007\333\001\002\000\006" +
    "\012\uff72\032\306\001\002\000\004\012\uff77\001\002\000" +
    "\004\035\336\001\002\000\004\007\uff76\001\002\000\004" +
    "\007\340\001\002\000\004\037\341\001\002\000\004\006" +
    "\343\001\002\000\004\012\uff75\001\002\000\004\035\344" +
    "\001\002\000\004\012\uff71\001\002\000\004\035\346\001" +
    "\002\000\004\007\uff96\001\002\000\004\007\350\001\002" +
    "\000\006\037\353\040\351\001\002\000\004\006\361\001" +
    "\002\000\004\012\uff95\001\002\000\004\006\354\001\002" +
    "\000\004\035\355\001\002\000\004\007\uff7c\001\002\000" +
    "\004\007\357\001\002\000\004\040\315\001\002\000\004" +
    "\012\uff7b\001\002\000\004\035\362\001\002\000\004\007" +
    "\uff7a\001\002\000\004\007\364\001\002\000\004\037\341" +
    "\001\002\000\004\012\uff79\001\002\000\006\005\uffa8\007" +
    "\uffaa\001\002\000\004\007\370\001\002\000\004\011\247" +
    "\001\002\000\004\005\uffa9\001\002\000\004\006\373\001" +
    "\002\000\004\035\374\001\002\000\004\007\uffa0\001\002" +
    "\000\004\007\376\001\002\000\010\032\377\036\u0102\040" +
    "\u0100\001\002\000\004\006\u0122\001\002\000\004\006\u010a" +
    "\001\002\000\004\012\uff9f\001\002\000\004\006\u0103\001" +
    "\002\000\004\010\u0104\001\002\000\004\034\u0105\001\002" +
    "\000\004\010\u0106\001\002\000\004\007\uff92\001\002\000" +
    "\004\007\u0108\001\002\000\006\032\276\040\277\001\002" +
    "\000\004\012\uff91\001\002\000\004\035\u010b\001\002\000" +
    "\004\007\uff8e\001\002\000\004\007\u010d\001\002\000\006" +
    "\032\u010e\036\u010f\001\002\000\004\006\u0118\001\002\000" +
    "\004\006\u0111\001\002\000\004\012\uff8d\001\002\000\004" +
    "\010\u0112\001\002\000\004\034\u0113\001\002\000\004\010" +
    "\u0114\001\002\000\004\007\uff6c\001\002\000\004\007\u0116" +
    "\001\002\000\006\012\uff72\032\306\001\002\000\004\012" +
    "\uff6b\001\002\000\004\035\u0119\001\002\000\004\007\uff6a" +
    "\001\002\000\004\007\u011b\001\002\000\004\036\u011d\001" +
    "\002\000\004\012\uff69\001\002\000\004\006\u011e\001\002" +
    "\000\004\010\u011f\001\002\000\004\034\u0120\001\002\000" +
    "\004\010\u0121\001\002\000\004\012\uff68\001\002\000\004" +
    "\035\u0123\001\002\000\004\007\uff90\001\002\000\004\007" +
    "\u0125\001\002\000\006\036\u0127\040\u0126\001\002\000\004" +
    "\006\u0130\001\002\000\004\006\u0129\001\002\000\004\012" +
    "\uff8f\001\002\000\004\010\u012a\001\002\000\004\034\u012b" +
    "\001\002\000\004\010\u012c\001\002\000\004\007\uff70\001" +
    "\002\000\004\007\u012e\001\002\000\004\040\315\001\002" +
    "\000\004\012\uff6f\001\002\000\004\035\u0131\001\002\000" +
    "\004\007\uff6e\001\002\000\004\007\u0133\001\002\000\004" +
    "\036\u011d\001\002\000\004\012\uff6d\001\002\000\004\006" +
    "\u0136\001\002\000\004\035\u0137\001\002\000\004\007\uff9a" +
    "\001\002\000\004\007\u0139\001\002\000\010\032\u013a\036" +
    "\u013d\037\u013c\001\002\000\004\006\u014a\001\002\000\004" +
    "\012\uff99\001\002\000\004\006\u0145\001\002\000\004\006" +
    "\u013e\001\002\000\004\010\u013f\001\002\000\004\034\u0140" +
    "\001\002\000\004\010\u0141\001\002\000\004\007\uff86\001" +
    "\002\000\004\007\u0143\001\002\000\006\032\325\037\327" +
    "\001\002\000\004\012\uff85\001\002\000\004\035\u0146\001" +
    "\002\000\004\007\uff84\001\002\000\004\007\u0148\001\002" +
    "\000\006\032\u010e\036\u010f\001\002\000\004\012\uff83\001" +
    "\002\000\004\035\u014b\001\002\000\004\007\uff82\001\002" +
    "\000\004\007\u014d\001\002\000\006\036\u0150\037\u014e\001" +
    "\002\000\004\006\u0158\001\002\000\004\012\uff81\001\002" +
    "\000\004\006\u0151\001\002\000\004\010\u0152\001\002\000" +
    "\004\034\u0153\001\002\000\004\010\u0154\001\002\000\004" +
    "\007\uff67\001\002\000\004\007\u0156\001\002\000\004\037" +
    "\341\001\002\000\004\012\uff66\001\002\000\004\035\u0159" +
    "\001\002\000\004\007\uff65\001\002\000\004\007\u015b\001" +
    "\002\000\004\036\u011d\001\002\000\004\012\uff64\001\002" +
    "\000\004\006\u015e\001\002\000\004\035\u015f\001\002\000" +
    "\004\007\uff9d\001\002\000\004\007\u0161\001\002\000\010" +
    "\036\u0165\037\u0163\040\u0162\001\002\000\004\006\u0172\001" +
    "\002\000\004\006\u016d\001\002\000\004\012\uff9c\001\002" +
    "\000\004\006\u0166\001\002\000\004\010\u0167\001\002\000" +
    "\004\034\u0168\001\002\000\004\010\u0169\001\002\000\004" +
    "\007\uff8c\001\002\000\004\007\u016b\001\002\000\006\037" +
    "\353\040\351\001\002\000\004\012\uff8b\001\002\000\004" +
    "\035\u016e\001\002\000\004\007\uff8a\001\002\000\004\007" +
    "\u0170\001\002\000\006\036\u0127\040\u0126\001\002\000\004" +
    "\012\uff89\001\002\000\004\035\u0173\001\002\000\004\007" +
    "\uff88\001\002\000\004\007\u0175\001\002\000\006\036\u0150" +
    "\037\u014e\001\002\000\004\012\uff87\001\002\000\004\012" +
    "\u01d0\001\002\000\004\006\uff5d\001\002\000\004\006\uff60" +
    "\001\002\000\004\006\uff5b\001\002\000\004\006\u017c\001" +
    "\002\000\010\045\u017d\046\u0180\047\u017e\001\002\000\006" +
    "\007\uff48\012\uff48\001\002\000\006\007\uff46\012\uff46\001" +
    "\002\000\004\007\uff5a\001\002\000\006\007\uff47\012\uff47" +
    "\001\002\000\004\007\u0182\001\002\000\006\036\u0185\043" +
    "\u0184\001\002\000\004\012\uff59\001\002\000\004\006\u0198" +
    "\001\002\000\004\006\u0186\001\002\000\004\010\u0187\001" +
    "\002\000\004\034\u0188\001\002\000\004\010\u0189\001\002" +
    "\000\004\007\uff51\001\002\000\004\007\u018b\001\002\000" +
    "\004\043\u018d\001\002\000\004\012\uff50\001\002\000\004" +
    "\006\u018e\001\002\000\004\004\u018f\001\002\000\004\010" +
    "\u0191\001\002\000\004\005\u0197\001\002\000\004\034\u0192" +
    "\001\002\000\004\010\u0193\001\002\000\006\005\uff49\007" +
    "\uff4b\001\002\000\004\007\u0195\001\002\000\004\010\u0191" +
    "\001\002\000\004\005\uff4a\001\002\000\004\012\uff4d\001" +
    "\002\000\004\004\u0199\001\002\000\004\010\u0191\001\002" +
    "\000\004\005\u019b\001\002\000\004\007\u019c\001\002\000" +
    "\004\036\u019e\001\002\000\004\012\uff4f\001\002\000\004" +
    "\006\u019f\001\002\000\004\010\u01a0\001\002\000\004\034" +
    "\u01a1\001\002\000\004\010\u01a2\001\002\000\004\012\uff4c" +
    "\001\002\000\004\006\u01a4\001\002\000\004\010\u01a5\001" +
    "\002\000\004\034\u01a6\001\002\000\004\010\u01a7\001\002" +
    "\000\004\007\uff5f\001\002\000\004\007\u01a9\001\002\000" +
    "\006\043\u01aa\044\u01ac\001\002\000\004\006\u01b2\001\002" +
    "\000\004\012\uff5e\001\002\000\004\006\u01ad\001\002\000" +
    "\010\045\u017d\046\u0180\047\u017e\001\002\000\004\007\uff57" +
    "\001\002\000\004\007\u01b0\001\002\000\004\043\u018d\001" +
    "\002\000\004\012\uff56\001\002\000\004\004\u01b3\001\002" +
    "\000\004\010\u0191\001\002\000\004\005\u01b5\001\002\000" +
    "\004\007\u01b6\001\002\000\004\044\u01b8\001\002\000\004" +
    "\012\uff58\001\002\000\004\006\u01b9\001\002\000\010\045" +
    "\u017d\046\u0180\047\u017e\001\002\000\004\012\uff4e\001\002" +
    "\000\004\006\u01bc\001\002\000\004\004\u01bd\001\002\000" +
    "\004\010\u0191\001\002\000\004\005\u01bf\001\002\000\004" +
    "\007\u01c0\001\002\000\006\036\u01c2\044\u01c3\001\002\000" +
    "\004\012\uff5c\001\002\000\004\006\u01c9\001\002\000\004" +
    "\006\u01c4\001\002\000\010\045\u017d\046\u0180\047\u017e\001" +
    "\002\000\004\007\uff53\001\002\000\004\007\u01c7\001\002" +
    "\000\004\036\u019e\001\002\000\004\012\uff52\001\002\000" +
    "\004\010\u01ca\001\002\000\004\034\u01cb\001\002\000\004" +
    "\010\u01cc\001\002\000\004\007\uff55\001\002\000\004\007" +
    "\u01ce\001\002\000\004\044\u01b8\001\002\000\004\012\uff54" +
    "\001\002\000\006\005\uff61\007\uff63\001\002\000\004\007" +
    "\u01d2\001\002\000\004\011\237\001\002\000\004\005\uff62" +
    "\001\002\000\004\004\u01d5\001\002\000\004\011\247\001" +
    "\002\000\004\005\u01d7\001\002\000\004\007\u01d8\001\002" +
    "\000\004\016\u01d9\001\002\000\004\006\u01db\001\002\000" +
    "\004\012\ufff4\001\002\000\004\004\u01dc\001\002\000\004" +
    "\011\237\001\002\000\004\005\u01de\001\002\000\004\012" +
    "\ufff0\001\002\000\004\012\u01e0\001\002\000\006\005\uffa5" +
    "\007\uffa7\001\002\000\004\007\u01e2\001\002\000\004\011" +
    "\226\001\002\000\004\005\uffa6\001\002\000\004\004\u01e5" +
    "\001\002\000\004\011\237\001\002\000\004\005\u01e7\001" +
    "\002\000\004\007\u01e8\001\002\000\006\014\u01ea\015\u01eb" +
    "\001\002\000\004\012\ufff8\001\002\000\004\006\u01f1\001" +
    "\002\000\004\006\u01ec\001\002\000\004\004\u01ed\001\002" +
    "\000\004\005\u01ee\001\002\000\004\007\u01ef\001\002\000" +
    "\004\014\244\001\002\000\004\012\ufff1\001\002\000\004" +
    "\004\u01f2\001\002\000\004\011\247\001\002\000\004\005" +
    "\u01f4\001\002\000\004\007\u01f5\001\002\000\004\015\u01f7" +
    "\001\002\000\004\012\ufff2\001\002\000\004\006\u01f8\001" +
    "\002\000\004\004\u01f9\001\002\000\004\011\226\001\002" +
    "\000\004\005\u01fb\001\002\000\004\012\uffef\001\002\000" +
    "\004\004\u01fd\001\002\000\004\011\247\001\002\000\004" +
    "\005\u01ff\001\002\000\004\007\u0200\001\002\000\006\015" +
    "\u0203\016\u0202\001\002\000\004\012\ufffa\001\002\000\004" +
    "\006\u020b\001\002\000\004\006\ufff7\001\002\000\004\006" +
    "\u0205\001\002\000\004\004\u0206\001\002\000\004\011\226" +
    "\001\002\000\004\005\u0208\001\002\000\004\007\u0209\001" +
    "\002\000\004\016\u01d9\001\002\000\004\012\ufff6\001\002" +
    "\000\004\004\u020c\001\002\000\004\011\237\001\002\000" +
    "\004\005\u020e\001\002\000\004\007\u020f\001\002\000\004" +
    "\015\u01f7\001\002\000\004\012\ufff5\001\002\000\006\050" +
    "\041\051\042\001\002\000\006\007\uffcd\012\uffcd\001\002" +
    "\000\006\007\120\012\uffc5\001\002\000\004\012\uffcc\001" +
    "\002\000\004\004\u0216\001\002\000\004\011\226\001\002" +
    "\000\004\005\u0218\001\002\000\004\007\u0219\001\002\000" +
    "\010\013\u021d\014\u021b\016\u021c\001\002\000\004\012\ufffc" +
    "\001\002\000\004\006\u0240\001\002\000\004\006\u0225\001" +
    "\002\000\004\006\u021e\001\002\000\004\011\u021f\001\002" +
    "\000\024\003\uffe1\017\uffe1\020\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\033\uffe1\001\002\000\024\003\026" +
    "\017\025\020\024\023\022\024\023\025\027\026\017\027" +
    "\030\033\021\001\002\000\004\012\u0222\001\002\000\004" +
    "\007\u0223\001\002\000\006\014\233\016\234\001\002\000" +
    "\004\012\uffe0\001\002\000\004\004\u0226\001\002\000\004" +
    "\011\237\001\002\000\004\005\u0228\001\002\000\004\007" +
    "\u0229\001\002\000\006\013\u022c\014\u022a\001\002\000\004" +
    "\006\u0234\001\002\000\004\012\uffde\001\002\000\004\006" +
    "\u022d\001\002\000\004\011\u022e\001\002\000\024\003\uffdd" +
    "\017\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\033\uffdd\001\002\000\024\003\026\017\025\020\024" +
    "\023\022\024\023\025\027\026\017\027\030\033\021\001" +
    "\002\000\004\012\u0231\001\002\000\004\007\u0232\001\002" +
    "\000\004\014\244\001\002\000\004\012\uffdc\001\002\000" +
    "\004\004\u0235\001\002\000\004\011\247\001\002\000\004" +
    "\005\u0237\001\002\000\004\007\u0238\001\002\000\004\013" +
    "\u023a\001\002\000\004\012\uffdb\001\002\000\004\006\u023b" +
    "\001\002\000\004\011\u023c\001\002\000\024\003\uffe3\017" +
    "\uffe3\020\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\033\uffe3\001\002\000\024\003\026\017\025\020\024\023" +
    "\022\024\023\025\027\026\017\027\030\033\021\001\002" +
    "\000\004\012\u023f\001\002\000\004\012\uffe2\001\002\000" +
    "\004\004\u0241\001\002\000\004\011\247\001\002\000\004" +
    "\005\u0243\001\002\000\004\007\u0244\001\002\000\006\013" +
    "\u0247\016\u0246\001\002\000\004\012\uffdf\001\002\000\004" +
    "\006\u024f\001\002\000\004\006\u0248\001\002\000\004\011" +
    "\u0249\001\002\000\024\003\uffe9\017\uffe9\020\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\033\uffe9\001\002\000" +
    "\024\003\026\017\025\020\024\023\022\024\023\025\027" +
    "\026\017\027\030\033\021\001\002\000\004\012\u024c\001" +
    "\002\000\004\007\u024d\001\002\000\004\016\u01d9\001\002" +
    "\000\004\012\uffe8\001\002\000\004\004\u0250\001\002\000" +
    "\004\011\237\001\002\000\004\005\u0252\001\002\000\004" +
    "\007\u0253\001\002\000\004\013\u023a\001\002\000\004\012" +
    "\uffe7\001\002\000\004\002\000\001\002\000\004\004\u0257" +
    "\001\002\000\004\011\237\001\002\000\004\005\u0259\001" +
    "\002\000\004\007\u025a\001\002\000\010\013\u025e\014\u025c" +
    "\015\u025d\001\002\000\004\012\ufffb\001\002\000\004\006" +
    "\u026c\001\002\000\004\006\u0266\001\002\000\004\006\u025f" +
    "\001\002\000\004\011\u0260\001\002\000\024\003\uffda\017" +
    "\uffda\020\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda" +
    "\033\uffda\001\002\000\024\003\026\017\025\020\024\023" +
    "\022\024\023\025\027\026\017\027\030\033\021\001\002" +
    "\000\004\012\u0263\001\002\000\004\007\u0264\001\002\000" +
    "\006\014\u01ea\015\u01eb\001\002\000\004\012\uffd9\001\002" +
    "\000\004\004\u0267\001\002\000\004\011\226\001\002\000" +
    "\004\005\u0269\001\002\000\004\007\u026a\001\002\000\006" +
    "\013\u022c\014\u022a\001\002\000\004\012\uffd7\001\002\000" +
    "\004\004\u026d\001\002\000\004\011\247\001\002\000\004" +
    "\005\u026f\001\002\000\004\007\u0270\001\002\000\006\013" +
    "\u0273\015\u0272\001\002\000\004\012\uffd8\001\002\000\004" +
    "\006\u027b\001\002\000\004\006\u0274\001\002\000\004\011" +
    "\u0275\001\002\000\024\003\uffe6\017\uffe6\020\uffe6\023\uffe6" +
    "\024\uffe6\025\uffe6\026\uffe6\027\uffe6\033\uffe6\001\002\000" +
    "\024\003\026\017\025\020\024\023\022\024\023\025\027" +
    "\026\017\027\030\033\021\001\002\000\004\012\u0278\001" +
    "\002\000\004\007\u0279\001\002\000\004\015\u01f7\001\002" +
    "\000\004\012\uffe5\001\002\000\004\004\u027c\001\002\000" +
    "\004\011\226\001\002\000\004\005\u027e\001\002\000\004" +
    "\007\u027f\001\002\000\004\013\u023a\001\002\000\004\012" +
    "\uffe4\001\002\000\004\004\u0282\001\002\000\004\011\247" +
    "\001\002\000\004\005\u0284\001\002\000\004\007\u0285\001" +
    "\002\000\010\013\u0289\015\u0288\016\u0287\001\002\000\004" +
    "\012\ufffd\001\002\000\004\006\u0297\001\002\000\004\006" +
    "\u0291\001\002\000\004\006\u028a\001\002\000\004\011\u028b" +
    "\001\002\000\024\003\uffed\017\uffed\020\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\027\uffed\033\uffed\001\002\000\024" +
    "\003\026\017\025\020\024\023\022\024\023\025\027\026" +
    "\017\027\030\033\021\001\002\000\004\012\u028e\001\002" +
    "\000\004\007\u028f\001\002\000\006\015\u0203\016\u0202\001" +
    "\002\000\004\012\uffec\001\002\000\004\004\u0292\001\002" +
    "\000\004\011\226\001\002\000\004\005\u0294\001\002\000" +
    "\004\007\u0295\001\002\000\006\013\u0247\016\u0246\001\002" +
    "\000\004\012\uffeb\001\002\000\004\004\u0298\001\002\000" +
    "\004\011\237\001\002\000\004\005\u029a\001\002\000\004" +
    "\007\u029b\001\002\000\006\013\u0273\015\u0272\001\002\000" +
    "\004\012\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u029a\000\004\002\004\001\001\000\004\003\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\015\001\001" +
    "\000\004\022\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\111\043\001\001\000\002\001\001" +
    "\000\004\037\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\051\001\001\000\004" +
    "\115\052\001\001\000\002\001\001\000\004\041\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\116\062\001" +
    "\001\000\002\001\001\000\004\043\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\067\001\001\000" +
    "\002\001\001\000\004\024\071\001\001\000\004\110\072" +
    "\001\001\000\002\001\001\000\004\036\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\100\001\001\000\004\113\101\001\001\000\002\001" +
    "\001\000\004\041\103\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\114\106\001\001\000\002\001\001\000" +
    "\004\042\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\106\116\001\001\000\004\035\120\001\001" +
    "\000\004\022\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\112\124\001\001\000\002" +
    "\001\001\000\004\040\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\024\132\001\001" +
    "\000\004\120\133\001\001\000\002\001\001\000\004\043" +
    "\135\001\001\000\002\001\001\000\004\024\137\001\001" +
    "\000\004\117\140\001\001\000\002\001\001\000\004\042" +
    "\142\001\001\000\002\001\001\000\004\024\144\001\001" +
    "\000\004\104\145\001\001\000\004\035\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\101\154\001\001\000" +
    "\004\035\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\103\203\001\001\000\004\035\204\001" +
    "\001\000\002\001\001\000\004\024\206\001\001\000\004" +
    "\102\207\001\001\000\004\035\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\107\213\001\001\000\004" +
    "\035\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\226\001\001\000\004\030\u01de\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\237\001\001\000\004\032\u0176\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\247\001\001\000\004\030\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\127\u015c\001" +
    "\001\000\004\131\u0134\001\001\000\004\125\371\001\001" +
    "\000\002\001\001\000\004\123\256\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\124\263\001\001\000\002\001\001\000\004\044" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\133" +
    "\273\001\001\000\002\001\001\000\004\050\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\150\302\001\001\000\002\001\001" +
    "\000\004\054\304\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\147\312\001\001\000\002\001\001\000\004\053" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\135" +
    "\322\001\001\000\002\001\001\000\004\052\325\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\153\331\001\001\000\002\001\001" +
    "\000\004\054\333\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\154\336\001\001\000\002\001\001\000\004" +
    "\055\341\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\134\346\001\001\000\002\001\001\000\004\051\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\151\355\001\001\000\002\001" +
    "\001\000\004\053\357\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\152\362\001\001\000\002\001\001\000" +
    "\004\055\364\001\001\000\002\001\001\000\004\121\366" +
    "\001\001\000\002\001\001\000\004\026\370\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\126\374\001\001\000\002\001\001\000\004\045\u0100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\136\u0106\001\001\000\002\001\001" +
    "\000\004\050\u0108\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\140\u010b\001\001\000\002\001\001\000\004" +
    "\057\u010f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\157\u0114\001\001\000\002\001\001\000" +
    "\004\054\u0116\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\160\u0119\001\001\000\002\001\001\000\004\060" +
    "\u011b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\137\u0123\001\001\000\002" +
    "\001\001\000\004\056\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\155\u012c\001\001\000" +
    "\002\001\001\000\004\053\u012e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\156\u0131\001\001\000\002\001" +
    "\001\000\004\060\u0133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\132\u0137\001\001\000" +
    "\002\001\001\000\004\047\u013a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\144\u0141\001\001\000\002\001\001\000\004\052\u0143\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\145\u0146" +
    "\001\001\000\002\001\001\000\004\057\u0148\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\146\u014b\001\001" +
    "\000\002\001\001\000\004\061\u014e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\161\u0154\001" +
    "\001\000\002\001\001\000\004\055\u0156\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\162\u0159\001\001\000" +
    "\002\001\001\000\004\060\u015b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\130\u015f\001" +
    "\001\000\002\001\001\000\004\046\u0163\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\141\u0169\001\001\000\002\001\001\000\004\051" +
    "\u016b\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\142\u016e\001\001\000\002\001\001\000\004\056\u0170\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\143\u0173" +
    "\001\001\000\002\001\001\000\004\061\u0175\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\166\u01ba\001\001" +
    "\000\004\164\u01a2\001\001\000\004\167\u017a\001\001\000" +
    "\002\001\001\000\004\034\u017e\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\170\u0180\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\u0182\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\174\u0189" +
    "\001\001\000\002\001\001\000\004\066\u018b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\u018f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\175\u0193\001\001\000\002\001\001" +
    "\000\004\033\u0195\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u0199\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\u019c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\165\u01a7\001\001\000\002\001\001\000\004\062" +
    "\u01aa\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\u01ad\001\001\000\004\171\u01ae\001" +
    "\001\000\002\001\001\000\004\066\u01b0\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u01b3\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\u01b6\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\u01b9\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u01bd\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\u01c0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\u01c4\001\001\000" +
    "\004\173\u01c5\001\001\000\002\001\001\000\004\067\u01c7" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\172\u01cc\001\001\000\002" +
    "\001\001\000\004\065\u01ce\001\001\000\002\001\001\000" +
    "\004\163\u01d0\001\001\000\002\001\001\000\004\031\u01d2" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u01d5\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u01d9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u01dc\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\122\u01e0\001" +
    "\001\000\002\001\001\000\004\027\u01e2\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u01e5\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u01e8\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\u01ef\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u01f2\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u01f5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\u01f9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\026" +
    "\u01fd\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\u0200\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u0203\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u0206\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u0209\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u020c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\u020f\001\001\000\002\001\001" +
    "\000\004\024\u0211\001\001\000\004\105\u0212\001\001\000" +
    "\004\035\u0213\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\u0216\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\u0219\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\076\u021f\001\001\000\004\022\u0220\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\u0223\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\u0226" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\u022a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\077\u022e\001\001\000" +
    "\004\022\u022f\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u0232\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0235\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\u0238\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\u023c\001\001" +
    "\000\004\022\u023d\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u0241\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u0244\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\073\u0249\001\001\000\004\022\u024a\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u024d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\031" +
    "\u0250\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\u0253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\u0257\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\u025a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\100\u0260\001\001\000\004\022" +
    "\u0261\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0264\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u0267\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u026a\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u026d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u0270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\u0275\001\001\000\004\022\u0276\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\u0279\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\u027c\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\u027f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u0282\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\u0285" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\072\u028b" +
    "\001\001\000\004\022\u028c\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u028f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u0292\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0295\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u0298\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u029b\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    Juego juego;
    Mapa mapa;
    ManejadorMapa manejadorMapa;
    ArrayList<Planeta> listaPlanetas;
    ArrayList<Planeta> listaPlanetasNeutrales;
    ArrayList<Jugador> listaJugadores;

    public void setAtributos(ManejadorMapa manejadorMapa, Mapa mapa, ArrayList<Planeta> listaPlanetas, ArrayList<Planeta> listaPlanetasNeutrales, ArrayList<Jugador> listaJugadores){
        this.mapa = mapa;
        this.manejadorMapa = manejadorMapa;
        this.listaPlanetas = listaPlanetas;
        this.listaPlanetasNeutrales = listaPlanetasNeutrales;
        this.listaJugadores = listaJugadores;
        
    }
    public void setJuego(){
        juego = new Juego(mapa,manejadorMapa,listaPlanetas,listaPlanetasNeutrales,listaJugadores);
    }

    public Juego getJuego(){
        return juego;
    }

    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                //Error e = new Error((String) s.value, "Sintactico", "Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, s.right, s.left);
            
                //escribirErrores(e);
                setAccion("ERROR","Error Sintaxis token: " + (s.right+1) + " " + (s.left+1) + " " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {


    Mapa mapa = null;
    ArrayList<Planeta> listaPlanetas = new ArrayList<>();
    ArrayList<Planeta> listaPlanetasNeutrales = new ArrayList<>();
    ArrayList<Jugador> listaJugadores = new ArrayList<>();
    ManejadorMapa manejadorMapa = null;
    ManejadorPlanetas manejadorPlanetas = new ManejadorPlanetas();
    ManejadorJugador manejadorJugador = new ManejadorJugador();
    Planeta p;
    Jugador jugador;

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // DIFICULTADES ::= DIFICIL 
            {
              Object RESULT =null;
		RESULT=2;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIFICULTADES",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // DIFICULTADES ::= FACIL 
            {
              Object RESULT =null;
		RESULT=1;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIFICULTADES",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DIFICULTADES ::= HUMANO 
            {
              Object RESULT =null;
		RESULT=0;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIFICULTADES",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // PLANET_ASIG ::= COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        jugador.insertarPlaneta((String) a);
                    }
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PLANET_ASIG",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // PLANET_ASIG ::= COMILLAS IDENTIFICADOR COMILLAS NT$69 COMA PLANET_ASIG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$69
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PLANET_ASIG",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // NT$69 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                    if(manejadorPlanetas.isCorrecto((String) a)){
                        jugador.insertarPlaneta((String) a);
                    }
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$69",123, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ATJ6 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                        if(manejadorJugador.isCorrecto((String) a)){
                            jugador.setNombre((String) a);
                        }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ6",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ATJ5 ::= PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ5",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ATJ4 ::= TIPO DOS_PUNTOS DIFICULTADES 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		jugador.setTipo(Integer.parseInt(n.toString()));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ATJ3 ::= PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C COMA ATJ6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ3",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // ATJ3 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$68 COMA ATJ5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$68
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ3",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$68 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                        if(manejadorJugador.isCorrecto((String) a)){
                            jugador.setNombre((String) a);
                        }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$68",122, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ATJ2 ::= TIPO DOS_PUNTOS DIFICULTADES NT$67 COMA ATJ6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$67
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ2",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // NT$67 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
jugador.setTipo(Integer.parseInt(n.toString()));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$67",121, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ATJ2 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$66 COMA ATJ4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$66
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ2",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // NT$66 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                        if(manejadorJugador.isCorrecto((String) a)){
                            jugador.setNombre((String) a);
                        }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$66",120, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ATJ1 ::= TIPO DOS_PUNTOS DIFICULTADES NT$65 COMA ATJ5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$65
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ1",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // NT$65 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
jugador.setTipo(Integer.parseInt(n.toString()));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$65",119, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ATJ1 ::= PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C COMA ATJ4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ1",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ATRIB_JUGADORES ::= TIPO NT$63 DOS_PUNTOS DIFICULTADES NT$64 COMA ATJ3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$64
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_JUGADORES",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$64 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
jugador.setTipo(Integer.parseInt(n.toString()));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$64",118, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // NT$63 ::= 
            {
              Object RESULT =null;
jugador = new Jugador();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$63",117, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ATRIB_JUGADORES ::= PLANETAS_JUGADOR NT$62 DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C COMA ATJ2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$62
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_JUGADORES",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // NT$62 ::= 
            {
              Object RESULT =null;
jugador = new Jugador();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$62",116, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ATRIB_JUGADORES ::= NOMBRE NT$60 DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$61 COMA ATJ1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$61
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_JUGADORES",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // NT$61 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                        if(manejadorJugador.isCorrecto((String) a)){
                            jugador.setNombre((String) a);
                        }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$61",115, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // NT$60 ::= 
            {
              Object RESULT =null;
jugador = new Jugador();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$60",114, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // ESTRUCTURA_JUGADORES ::= LLAVES_A ATRIB_JUGADORES LLAVES_C 
            {
              Object RESULT =null;
		
                            if(jugador.getNombre()!=null){
                                listaJugadores.add(jugador);
                            }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_JUGADORES",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ESTRUCTURA_JUGADORES ::= LLAVES_A ATRIB_JUGADORES LLAVES_C NT$59 COMA ESTRUCTURA_JUGADORES 
            {
              Object RESULT =null;
              // propagate RESULT from NT$59
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_JUGADORES",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // NT$59 ::= 
            {
              Object RESULT =null;

                            if(jugador.getNombre()!=null){
                                if(manejadorJugador.isExistJugador(listaJugadores,jugador)){
                                    listaJugadores.add(jugador);
                                }
                            }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$59",113, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ATP14 ::= NAVES DOS_PUNTOS NUMERO NT$58 COMA ATP13 
            {
              Object RESULT =null;
              // propagate RESULT from NT$58
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP14",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // NT$58 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setNaves(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$58",112, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ATP14 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$57 COMA ATP10 
            {
              Object RESULT =null;
              // propagate RESULT from NT$57
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP14",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // NT$57 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null);}
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$57",111, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ATP13 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		
                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null);}    

                    if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                        listaPlanetas.add(p);
                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP13",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ATP12 ::= PRODUCCION DOS_PUNTOS NUMERO NT$56 COMA ATP13 
            {
              Object RESULT =null;
              // propagate RESULT from NT$56
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP12",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$56 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setProduccion(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$56",110, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ATP12 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$55 COMA ATP9 
            {
              Object RESULT =null;
              // propagate RESULT from NT$55
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP12",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NT$55 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null);}
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$55",109, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ATP11 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO NT$54 COMA ATP13 
            {
              Object RESULT =null;
              // propagate RESULT from NT$54
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP11",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$54 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setPorcentajeMuertes(Double.parseDouble((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$54",108, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ATP11 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$53 COMA ATP8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$53
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP11",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$53 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null);}
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$53",107, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ATP10 ::= NAVES DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		p.setNaves(Integer.parseInt((String) n));    
            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                listaPlanetas.add(p);
            }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP10",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ATP9 ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP9",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ATP9 ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		p.setProduccion(Integer.parseInt((String) n));    
            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                listaPlanetas.add(p);
            }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP9",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ATP8 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		p.setPorcentajeMuertes(Double.parseDouble((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP8",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ATP7 ::= PRODUCCION DOS_PUNTOS NUMERO NT$52 COMA ATP10 
            {
              Object RESULT =null;
              // propagate RESULT from NT$52
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP7",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$52 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setProduccion(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$52",106, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ATP7 ::= NAVES DOS_PUNTOS NUMERO NT$51 COMA ATP9 
            {
              Object RESULT =null;
              // propagate RESULT from NT$51
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP7",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NT$51 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setNaves(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$51",105, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ATP6 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO NT$50 COMA ATP10 
            {
              Object RESULT =null;
              // propagate RESULT from NT$50
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // NT$50 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setPorcentajeMuertes(Double.parseDouble((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$50",104, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ATP6 ::= NAVES DOS_PUNTOS NUMERO NT$49 COMA ATP8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$49
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // NT$49 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setNaves(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$49",103, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ATP5 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO NT$48 COMA ATP9 
            {
              Object RESULT =null;
              // propagate RESULT from NT$48
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP5",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // NT$48 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setPorcentajeMuertes(Double.parseDouble((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$48",102, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ATP5 ::= PRODUCCION DOS_PUNTOS NUMERO NT$47 COMA ATP8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$47
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP5",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // NT$47 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setProduccion(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$47",101, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ATP4 ::= PRODUCCION DOS_PUNTOS NUMERO NT$46 COMA ATP14 
            {
              Object RESULT =null;
              // propagate RESULT from NT$46
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // NT$46 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setProduccion(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$46",100, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ATP4 ::= NAVES DOS_PUNTOS NUMERO NT$45 COMA ATP12 
            {
              Object RESULT =null;
              // propagate RESULT from NT$45
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$45 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setNaves(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$45",99, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ATP4 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$44 COMA ATP7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$44
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$44 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null);}
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$44",98, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ATP3 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO NT$43 COMA ATP14 
            {
              Object RESULT =null;
              // propagate RESULT from NT$43
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // NT$43 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setPorcentajeMuertes(Double.parseDouble((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$43",97, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ATP3 ::= NAVES DOS_PUNTOS NUMERO NT$42 COMA ATP11 
            {
              Object RESULT =null;
              // propagate RESULT from NT$42
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // NT$42 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setNaves(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$42",96, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ATP3 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$41 COMA ATP6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$41
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // NT$41 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null);}
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$41",95, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ATP2 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO NT$40 COMA ATP12 
            {
              Object RESULT =null;
              // propagate RESULT from NT$40
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$40 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setPorcentajeMuertes(Double.parseDouble((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$40",94, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ATP2 ::= PRODUCCION DOS_PUNTOS NUMERO NT$39 COMA ATP11 
            {
              Object RESULT =null;
              // propagate RESULT from NT$39
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$39 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setProduccion(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$39",93, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ATP2 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$38 COMA ATP5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$38
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$38 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null);}
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$38",92, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ATP1 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO NT$37 COMA ATP7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$37
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$37 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setPorcentajeMuertes(Double.parseDouble((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$37",91, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ATP1 ::= PRODUCCION DOS_PUNTOS NUMERO NT$36 COMA ATP6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$36
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$36 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setProduccion(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$36",90, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ATP1 ::= NAVES DOS_PUNTOS NUMERO NT$35 COMA ATP5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$35
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$35 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setNaves(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$35",89, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ATRIB_PLANETAS ::= PORCENTAJE_MUERTES NT$33 DOS_PUNTOS NUMERO NT$34 COMA ATP4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$34
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$34 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setPorcentajeMuertes(Double.parseDouble((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$34",88, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$33 ::= 
            {
              Object RESULT =null;
p = new Planeta();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$33",87, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ATRIB_PLANETAS ::= PRODUCCION NT$31 DOS_PUNTOS NUMERO NT$32 COMA ATP3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$32
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$32 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setProduccion(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$32",86, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$31 ::= 
            {
              Object RESULT =null;
p = new Planeta();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$31",85, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ATRIB_PLANETAS ::= NAVES NT$29 DOS_PUNTOS NUMERO NT$30 COMA ATP2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$30
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$30 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
p.setNaves(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$30",84, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$29 ::= 
            {
              Object RESULT =null;
p = new Planeta();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$29",83, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ATRIB_PLANETAS ::= NOMBRE NT$27 DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$28 COMA ATP1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-8)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$28 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

                    if(manejadorPlanetas.isCorrecto((String) a)){
                        p.setNombre((String) a);
                    }else{p.setNombre(null);}
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$28",82, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$27 ::= 
            {
              Object RESULT =null;
p = new Planeta();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$27",81, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ESTRUCTURA_PLANT_NEU ::= LLAVES_A ATRIB_PLANETAS LLAVES_C 
            {
              Object RESULT =null;
		 
                        if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                            listaPlanetasNeutrales.add(p);
                        }
                    
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANT_NEU",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ESTRUCTURA_PLANT_NEU ::= LLAVES_A ATRIB_PLANETAS LLAVES_C NT$26 COMA ESTRUCTURA_PLANT_NEU 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANT_NEU",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$26 ::= 
            {
              Object RESULT =null;
 
            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                listaPlanetasNeutrales.add(p);
            }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$26",80, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ESTRUCTURA_PLANETAS ::= LLAVES_A ATRIB_PLANETAS LLAVES_C 
            {
              Object RESULT =null;
		
            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                if(manejadorPlanetas.isProduccion(p)){
                    listaPlanetas.add(p);
                }
            }
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANETAS",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ESTRUCTURA_PLANETAS ::= LLAVES_A ATRIB_PLANETAS LLAVES_C NT$25 COMA ESTRUCTURA_PLANETAS 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANETAS",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$25 ::= 
            {
              Object RESULT =null;

            if(manejadorPlanetas.isExistPlaneta(listaPlanetas,p)){
                if(manejadorPlanetas.isProduccion(p)){
                    listaPlanetas.add(p);
                }
            }
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$25",79, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ATN6 ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		mapa.setMostrarNavesNeutrales((boolean) b);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN6",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ATN5 ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		mapa.setMostrarEstadisticasNeutrales((boolean) b);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN5",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ATN4 ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		mapa.setProduccionNeutrales(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN4",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ATN3 ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO NT$24 COMA ATN6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN3",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$24 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
mapa.setMostrarEstadisticasNeutrales((boolean) b);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$24",78, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ATN3 ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO NT$23 COMA ATN5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN3",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$23 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
mapa.setMostrarNavesNeutrales((boolean) b);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$23",77, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ATN2 ::= PRODUCCION DOS_PUNTOS NUMERO NT$22 COMA ATN6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN2",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$22 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
mapa.setProduccionNeutrales(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$22",76, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ATN2 ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO NT$21 COMA ATN4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN2",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$21 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
mapa.setMostrarNavesNeutrales((boolean) b);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$21",75, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ATN1 ::= PRODUCCION DOS_PUNTOS NUMERO NT$20 COMA ATN5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN1",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$20 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
mapa.setProduccionNeutrales(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$20",74, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATN1 ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO NT$19 COMA ATN4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN1",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$19 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
mapa.setMostrarEstadisticasNeutrales((boolean) b);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$19",73, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATRIB_NEU ::= error ESTRUCTURA_MAPA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ATRIB_NEU ::= PRODUCCION DOS_PUNTOS NUMERO NT$18 COMA ATN3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$18 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
mapa.setProduccionNeutrales(Integer.parseInt((String) n));
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$18",72, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATRIB_NEU ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO NT$17 COMA ATN2 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$17 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
mapa.setMostrarEstadisticasNeutrales((boolean) b);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$17",71, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ATRIB_NEU ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO NT$16 COMA ATN1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$16 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
mapa.setMostrarNavesNeutrales((boolean) b);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$16",70, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BOLEANO ::= FALSE 
            {
              Object RESULT =null;
		RESULT = false;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BOLEANO",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BOLEANO ::= TRUE 
            {
              Object RESULT =null;
		RESULT = true;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BOLEANO",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DIMENSION ::= COLUMNAS DOS_PUNTOS NUMERO COMA FILAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                    if(!manejadorMapa.isExiste(2)){
                        mapa.setTamanioX(Integer.parseInt((String) x));
                        mapa.setTamanioY(Integer.parseInt((String) y));
                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DIMENSION ::= FILAS DOS_PUNTOS NUMERO COMA COLUMNAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
		 
                    if(!manejadorMapa.isExiste(2)){
                        mapa.setTamanioX(Integer.parseInt((String) x));
                        mapa.setTamanioY(Integer.parseInt((String) y));
                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // MAPA_FIN ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAPA_FIN",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // MAPA_FIN ::= COMA ESTRUCTURA_MAPA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAPA_FIN",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ESTRUCTURA_MAPA ::= error ESTRUCTURA_MAPA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		parser.syntax_error((Symbol)e);
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ESTRUCTURA_MAPA ::= FINALIZACION DOS_PUNTOS NUMERO NT$15 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$15 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 
                    if(!manejadorMapa.isExiste(8)){
                        mapa.setFinalizacion(Integer.parseInt((String) n));
                    }else{

                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$15",69, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ESTRUCTURA_MAPA ::= NEUTRALES DOS_PUNTOS LLAVES_A ATRIB_NEU LLAVES_C NT$14 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$14 ::= 
            {
              Object RESULT =null;
 
                    if(!manejadorMapa.isExiste(7)){
                        
                    }else{

                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$14",68, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ESTRUCTURA_MAPA ::= ACUMULAR DOS_PUNTOS BOLEANO NT$13 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$13 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 
                    if(!manejadorMapa.isExiste(6)){
                        mapa.setAcumular((boolean) b);
                    }else{

                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$13",67, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ESTRUCTURA_MAPA ::= MAPA_CIEGO DOS_PUNTOS BOLEANO NT$12 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$12 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 
                    if(!manejadorMapa.isExiste(5)){
                        mapa.setMapaCiego((boolean) b);
                    }else{

                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$12",66, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ESTRUCTURA_MAPA ::= PLANET_NEU DOS_PUNTOS NUMERO NT$11 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$11 ::= 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 
                    if(!manejadorMapa.isExiste(4)){
                        mapa.setPlanetasNeutrales(Integer.parseInt((String) n));
                    }else{

                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$11",65, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ESTRUCTURA_MAPA ::= ALAZAR DOS_PUNTOS BOLEANO NT$10 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$10 ::= 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.peek()).value;
 
                    if(!manejadorMapa.isExiste(3)){
                        mapa.setAlAzar((boolean) b);
                    }else{

                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$10",64, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESTRUCTURA_MAPA ::= TAMANO DOS_PUNTOS LLAVES_A DIMENSION LLAVES_C MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESTRUCTURA_MAPA ::= ID DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS NT$9 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
 
                    if(!manejadorMapa.isExiste(1)){
                        mapa.setId((String) a);
                    }else{

                    }

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$9",63, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // S4 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S14 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S4",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // S4 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S4",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // S4 ::= MAPA DOS_PUNTOS LLAVES_A NT$8 ESTRUCTURA_MAPA LLAVES_C COMA S7 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S4",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$8 ::= 
            {
              Object RESULT =null;
 mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // S14 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S14",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // S14 ::= MAPA DOS_PUNTOS LLAVES_A NT$7 ESTRUCTURA_MAPA LLAVES_C COMA S10 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S14",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$7 ::= 
            {
              Object RESULT =null;
 mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // S3 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S14 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S3",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // S3 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S11 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S3",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // S3 ::= MAPA DOS_PUNTOS LLAVES_A NT$6 ESTRUCTURA_MAPA LLAVES_C COMA S6 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S3",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$6 ::= 
            {
              Object RESULT =null;
 mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // S13 ::= MAPA DOS_PUNTOS LLAVES_A NT$5 ESTRUCTURA_MAPA LLAVES_C 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S13",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT =null;
 mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // S12 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S12",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // S12 ::= MAPA DOS_PUNTOS LLAVES_A NT$4 ESTRUCTURA_MAPA LLAVES_C COMA S9 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S12",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$4 ::= 
            {
              Object RESULT =null;
 mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // S11 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S11",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S11 ::= MAPA DOS_PUNTOS LLAVES_A NT$3 ESTRUCTURA_MAPA LLAVES_C COMA S8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S11",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT$3 ::= 
            {
              Object RESULT =null;
 mapa = new Mapa(); manejadorMapa = new ManejadorMapa(); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S2 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S2",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // S2 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S11 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S2",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S2 ::= MAPA DOS_PUNTOS LLAVES_A NT$2 ESTRUCTURA_MAPA LLAVES_C COMA S5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S2",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$2 ::= 
            {
              Object RESULT =null;
 mapa = new Mapa(); manejadorMapa = new ManejadorMapa();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S10 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S10",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S9 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S9",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S8 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S8",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S7 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A CORCHE_C COMA S10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S7",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S7 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S7",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S6 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S6",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S6 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S6",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S5 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S5",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S5 ::= PLANETAS_NEUTRALES NT$1 DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S5",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("entroooo"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S1 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S1",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S1 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S1",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S1 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S1",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S0 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S0 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S0 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S0 ::= MAPA DOS_PUNTOS LLAVES_A NT$0 ESTRUCTURA_MAPA LLAVES_C COMA S1 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
 mapa = new Mapa(); manejadorMapa = new ManejadorMapa();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LLAVES_A S0 LLAVES_C 
            {
              Object RESULT =null;
		 parser.setAtributos(manejadorMapa, mapa, listaPlanetas, listaPlanetasNeutrales, listaJugadores); parser.setJuego();
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

