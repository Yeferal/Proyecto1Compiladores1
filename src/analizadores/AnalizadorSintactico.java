
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 13 17:28:36 CST 2020
//----------------------------------------------------

package analizadores;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 13 17:28:36 CST 2020
  */
public class AnalizadorSintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintactico() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\167\000\002\002\004\000\002\002\005\000\002\003" +
    "\011\000\002\003\011\000\002\003\011\000\002\003\011" +
    "\000\002\004\011\000\002\004\011\000\002\004\011\000" +
    "\002\070\002\000\002\010\012\000\002\010\011\000\002" +
    "\011\011\000\002\011\011\000\002\012\011\000\002\012" +
    "\010\000\002\013\007\000\002\014\007\000\002\015\007" +
    "\000\002\005\011\000\002\005\011\000\002\005\011\000" +
    "\002\016\011\000\002\016\011\000\002\017\011\000\002" +
    "\017\011\000\002\020\007\000\002\006\011\000\002\006" +
    "\011\000\002\006\011\000\002\021\011\000\002\021\011" +
    "\000\002\007\011\000\002\007\011\000\002\007\011\000" +
    "\002\022\010\000\002\022\010\000\002\022\006\000\002" +
    "\022\006\000\002\022\006\000\002\022\006\000\002\022" +
    "\010\000\002\071\002\000\002\072\002\000\002\073\002" +
    "\000\002\022\011\000\002\035\004\000\002\035\002\000" +
    "\002\023\011\000\002\023\011\000\002\024\003\000\002" +
    "\024\003\000\002\025\007\000\002\025\007\000\002\025" +
    "\007\000\002\036\007\000\002\036\007\000\002\037\007" +
    "\000\002\037\007\000\002\040\007\000\002\040\007\000" +
    "\002\041\005\000\002\042\005\000\002\043\005\000\002" +
    "\026\007\000\002\026\005\000\002\027\007\000\002\027" +
    "\005\000\002\030\011\000\002\030\007\000\002\030\007" +
    "\000\002\030\007\000\002\044\007\000\002\044\007\000" +
    "\002\044\007\000\002\045\011\000\002\045\007\000\002" +
    "\045\007\000\002\046\011\000\002\046\007\000\002\046" +
    "\007\000\002\047\011\000\002\047\007\000\002\047\007" +
    "\000\002\050\007\000\002\050\007\000\002\051\007\000" +
    "\002\051\007\000\002\052\007\000\002\052\007\000\002" +
    "\053\005\000\002\054\005\000\002\055\005\000\002\056" +
    "\011\000\002\056\007\000\002\057\011\000\002\057\007" +
    "\000\002\060\007\000\002\061\011\000\002\061\007\000" +
    "\002\031\007\000\002\031\005\000\002\032\011\000\002" +
    "\032\011\000\002\032\007\000\002\062\011\000\002\062" +
    "\007\000\002\063\011\000\002\063\007\000\002\064\011" +
    "\000\002\064\011\000\002\065\005\000\002\066\007\000" +
    "\002\067\007\000\002\033\007\000\002\033\005\000\002" +
    "\034\003\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0254\000\004\011\004\001\002\000\012\013\013\014" +
    "\007\015\012\016\010\001\002\000\004\002\006\001\002" +
    "\000\004\002\001\001\002\000\004\006\u023c\001\002\000" +
    "\004\006\u0213\001\002\000\004\012\u0212\001\002\000\004" +
    "\006\u01d6\001\002\000\004\006\014\001\002\000\004\011" +
    "\015\001\002\000\022\017\022\020\023\023\021\024\024" +
    "\025\025\026\016\027\026\033\020\001\002\000\004\006" +
    "\u01d3\001\002\000\004\012\175\001\002\000\004\006\uffd7" +
    "\001\002\000\004\006\164\001\002\000\004\006\157\001" +
    "\002\000\004\006\134\001\002\000\004\006\131\001\002" +
    "\000\004\006\126\001\002\000\004\006\027\001\002\000" +
    "\004\011\030\001\002\000\010\030\033\031\034\032\031" +
    "\001\002\000\004\006\110\001\002\000\004\012\104\001" +
    "\002\000\004\006\063\001\002\000\004\006\035\001\002" +
    "\000\006\050\036\051\037\001\002\000\006\007\uffcf\012" +
    "\uffcf\001\002\000\006\007\uffce\012\uffce\001\002\000\004" +
    "\007\041\001\002\000\006\030\044\032\042\001\002\000" +
    "\004\006\054\001\002\000\004\012\uffcc\001\002\000\004" +
    "\006\045\001\002\000\006\050\036\051\037\001\002\000" +
    "\004\007\047\001\002\000\004\032\050\001\002\000\004" +
    "\006\052\001\002\000\004\012\uffc8\001\002\000\004\035" +
    "\053\001\002\000\004\012\uffc4\001\002\000\004\035\055" +
    "\001\002\000\004\007\056\001\002\000\004\030\057\001" +
    "\002\000\004\006\061\001\002\000\004\012\uffc7\001\002" +
    "\000\006\050\036\051\037\001\002\000\004\012\uffc2\001" +
    "\002\000\006\050\036\051\037\001\002\000\004\007\065" +
    "\001\002\000\006\031\070\032\066\001\002\000\004\006" +
    "\075\001\002\000\004\012\uffcd\001\002\000\004\006\071" +
    "\001\002\000\006\050\036\051\037\001\002\000\004\007" +
    "\073\001\002\000\004\032\050\001\002\000\004\012\uffca" +
    "\001\002\000\004\035\076\001\002\000\004\007\077\001" +
    "\002\000\004\031\101\001\002\000\004\012\uffc9\001\002" +
    "\000\004\006\102\001\002\000\006\050\036\051\037\001" +
    "\002\000\004\012\uffc3\001\002\000\006\007\105\012\uffd2" +
    "\001\002\000\022\017\022\020\023\023\021\024\024\025" +
    "\025\026\016\027\026\033\020\001\002\000\004\012\uffd8" +
    "\001\002\000\004\012\uffd3\001\002\000\004\035\111\001" +
    "\002\000\004\007\112\001\002\000\006\030\114\031\115" +
    "\001\002\000\004\012\uffcb\001\002\000\004\006\122\001" +
    "\002\000\004\006\116\001\002\000\006\050\036\051\037" +
    "\001\002\000\004\007\120\001\002\000\004\030\057\001" +
    "\002\000\004\012\uffc5\001\002\000\006\050\036\051\037" +
    "\001\002\000\004\007\124\001\002\000\004\031\101\001" +
    "\002\000\004\012\uffc6\001\002\000\006\050\036\051\037" +
    "\001\002\000\006\007\105\012\uffd2\001\002\000\004\012" +
    "\uffda\001\002\000\004\035\132\001\002\000\006\007\105" +
    "\012\uffd2\001\002\000\004\012\uffdb\001\002\000\004\011" +
    "\135\001\002\000\006\021\140\022\137\001\002\000\004" +
    "\012\155\001\002\000\004\006\147\001\002\000\004\006" +
    "\141\001\002\000\004\035\142\001\002\000\004\007\143" +
    "\001\002\000\004\022\144\001\002\000\004\006\145\001" +
    "\002\000\004\035\146\001\002\000\004\012\uffd1\001\002" +
    "\000\004\035\150\001\002\000\004\007\151\001\002\000" +
    "\004\021\152\001\002\000\004\006\153\001\002\000\004" +
    "\035\154\001\002\000\004\012\uffd0\001\002\000\006\007" +
    "\105\012\uffd2\001\002\000\004\012\uffdd\001\002\000\004" +
    "\010\160\001\002\000\004\034\161\001\002\000\004\010" +
    "\162\001\002\000\006\007\105\012\uffd2\001\002\000\004" +
    "\012\uffde\001\002\000\006\050\036\051\037\001\002\000" +
    "\006\007\105\012\uffd2\001\002\000\004\012\uffdc\001\002" +
    "\000\004\006\170\001\002\000\004\035\uffd6\001\002\000" +
    "\004\035\172\001\002\000\006\007\uffd5\012\uffd5\001\002" +
    "\000\006\007\105\012\uffd2\001\002\000\004\012\uffd4\001" +
    "\002\000\004\007\176\001\002\000\010\014\177\015\202" +
    "\016\200\001\002\000\004\006\u01be\001\002\000\004\006" +
    "\u01a6\001\002\000\004\012\uffff\001\002\000\004\006\203" +
    "\001\002\000\004\004\204\001\002\000\004\011\205\001" +
    "\002\000\012\032\231\036\235\037\233\040\232\001\002" +
    "\000\004\005\207\001\002\000\004\007\210\001\002\000" +
    "\006\014\212\016\213\001\002\000\004\012\ufffa\001\002" +
    "\000\004\006\u0197\001\002\000\004\006\214\001\002\000" +
    "\004\004\215\001\002\000\004\011\216\001\002\000\010" +
    "\036\u0147\043\u0146\044\u0148\001\002\000\004\005\220\001" +
    "\002\000\004\007\221\001\002\000\004\014\223\001\002" +
    "\000\004\012\ufff4\001\002\000\004\006\224\001\002\000" +
    "\004\004\225\001\002\000\004\011\226\001\002\000\012" +
    "\032\231\036\235\037\233\040\232\001\002\000\004\005" +
    "\230\001\002\000\004\012\uffef\001\002\000\004\006\u0130" +
    "\001\002\000\004\006\u010f\001\002\000\004\006\335\001" +
    "\002\000\004\012\332\001\002\000\004\006\236\001\002" +
    "\000\004\010\237\001\002\000\004\034\240\001\002\000" +
    "\004\010\241\001\002\000\004\007\242\001\002\000\010" +
    "\032\243\037\245\040\244\001\002\000\004\006\314\001" +
    "\002\000\004\006\273\001\002\000\004\006\247\001\002" +
    "\000\004\012\uffbd\001\002\000\004\035\250\001\002\000" +
    "\004\007\251\001\002\000\006\032\252\040\253\001\002" +
    "\000\004\006\264\001\002\000\004\006\255\001\002\000" +
    "\004\012\uffb9\001\002\000\004\035\256\001\002\000\004" +
    "\007\257\001\002\000\004\032\260\001\002\000\004\006" +
    "\262\001\002\000\004\012\uffac\001\002\000\004\035\263" +
    "\001\002\000\004\012\uffa6\001\002\000\004\035\265\001" +
    "\002\000\004\007\266\001\002\000\004\040\267\001\002" +
    "\000\004\006\271\001\002\000\004\012\uffad\001\002\000" +
    "\004\035\272\001\002\000\004\012\uffa7\001\002\000\004" +
    "\035\274\001\002\000\004\007\275\001\002\000\006\032" +
    "\276\037\300\001\002\000\004\006\305\001\002\000\004" +
    "\012\uffb7\001\002\000\004\006\301\001\002\000\004\035" +
    "\302\001\002\000\004\007\303\001\002\000\004\032\260" +
    "\001\002\000\004\012\uffa9\001\002\000\004\035\306\001" +
    "\002\000\004\007\307\001\002\000\004\037\310\001\002" +
    "\000\004\006\312\001\002\000\004\012\uffa8\001\002\000" +
    "\004\035\313\001\002\000\004\012\uffa5\001\002\000\004" +
    "\035\315\001\002\000\004\007\316\001\002\000\006\037" +
    "\321\040\317\001\002\000\004\006\326\001\002\000\004" +
    "\012\uffb8\001\002\000\004\006\322\001\002\000\004\035" +
    "\323\001\002\000\004\007\324\001\002\000\004\040\267" +
    "\001\002\000\004\012\uffab\001\002\000\004\035\327\001" +
    "\002\000\004\007\330\001\002\000\004\037\310\001\002" +
    "\000\004\012\uffaa\001\002\000\006\005\uffc0\007\333\001" +
    "\002\000\004\011\226\001\002\000\004\005\uffc1\001\002" +
    "\000\004\035\336\001\002\000\004\007\337\001\002\000" +
    "\010\032\340\036\343\040\341\001\002\000\004\006\377" +
    "\001\002\000\004\006\352\001\002\000\004\012\uffbc\001" +
    "\002\000\004\006\344\001\002\000\004\010\345\001\002" +
    "\000\004\034\346\001\002\000\004\010\347\001\002\000" +
    "\004\007\350\001\002\000\006\032\252\040\253\001\002" +
    "\000\004\012\uffb6\001\002\000\004\035\353\001\002\000" +
    "\004\007\354\001\002\000\006\032\355\036\357\001\002" +
    "\000\004\006\366\001\002\000\004\012\uffb4\001\002\000" +
    "\004\006\360\001\002\000\004\010\361\001\002\000\004" +
    "\034\362\001\002\000\004\010\363\001\002\000\004\007" +
    "\364\001\002\000\004\032\260\001\002\000\004\012\uffa2" +
    "\001\002\000\004\035\367\001\002\000\004\007\370\001" +
    "\002\000\004\036\372\001\002\000\004\012\uffa1\001\002" +
    "\000\004\006\373\001\002\000\004\010\374\001\002\000" +
    "\004\034\375\001\002\000\004\010\376\001\002\000\004" +
    "\012\uffa0\001\002\000\004\035\u0100\001\002\000\004\007" +
    "\u0101\001\002\000\006\036\u0103\040\u0102\001\002\000\004" +
    "\006\u010b\001\002\000\004\006\u0105\001\002\000\004\012" +
    "\uffb5\001\002\000\004\010\u0106\001\002\000\004\034\u0107" +
    "\001\002\000\004\010\u0108\001\002\000\004\007\u0109\001" +
    "\002\000\004\040\267\001\002\000\004\012\uffa4\001\002" +
    "\000\004\035\u010c\001\002\000\004\007\u010d\001\002\000" +
    "\004\036\372\001\002\000\004\012\uffa3\001\002\000\004" +
    "\035\u0110\001\002\000\004\007\u0111\001\002\000\010\032" +
    "\u0112\036\u0115\037\u0114\001\002\000\004\006\u0120\001\002" +
    "\000\004\012\uffba\001\002\000\004\006\u011c\001\002\000" +
    "\004\006\u0116\001\002\000\004\010\u0117\001\002\000\004" +
    "\034\u0118\001\002\000\004\010\u0119\001\002\000\004\007" +
    "\u011a\001\002\000\006\032\276\037\300\001\002\000\004" +
    "\012\uffb0\001\002\000\004\035\u011d\001\002\000\004\007" +
    "\u011e\001\002\000\006\032\355\036\357\001\002\000\004" +
    "\012\uffaf\001\002\000\004\035\u0121\001\002\000\004\007" +
    "\u0122\001\002\000\006\036\u0125\037\u0123\001\002\000\004" +
    "\006\u012c\001\002\000\004\012\uffae\001\002\000\004\006" +
    "\u0126\001\002\000\004\010\u0127\001\002\000\004\034\u0128" +
    "\001\002\000\004\010\u0129\001\002\000\004\007\u012a\001" +
    "\002\000\004\037\310\001\002\000\004\012\uff9f\001\002" +
    "\000\004\035\u012d\001\002\000\004\007\u012e\001\002\000" +
    "\004\036\372\001\002\000\004\012\uff9e\001\002\000\004" +
    "\035\u0131\001\002\000\004\007\u0132\001\002\000\010\036" +
    "\u0136\037\u0134\040\u0133\001\002\000\004\006\u0141\001\002" +
    "\000\004\006\u013d\001\002\000\004\012\uffbb\001\002\000" +
    "\004\006\u0137\001\002\000\004\010\u0138\001\002\000\004" +
    "\034\u0139\001\002\000\004\010\u013a\001\002\000\004\007" +
    "\u013b\001\002\000\006\037\321\040\317\001\002\000\004" +
    "\012\uffb3\001\002\000\004\035\u013e\001\002\000\004\007" +
    "\u013f\001\002\000\006\036\u0103\040\u0102\001\002\000\004" +
    "\012\uffb2\001\002\000\004\035\u0142\001\002\000\004\007" +
    "\u0143\001\002\000\006\036\u0125\037\u0123\001\002\000\004" +
    "\012\uffb1\001\002\000\004\012\u0194\001\002\000\004\006" +
    "\u0182\001\002\000\004\006\u016d\001\002\000\004\006\u0149" +
    "\001\002\000\010\045\u014a\046\u014d\047\u014c\001\002\000" +
    "\006\007\uff8d\012\uff8d\001\002\000\004\007\u014e\001\002" +
    "\000\006\007\uff8b\012\uff8b\001\002\000\006\007\uff8c\012" +
    "\uff8c\001\002\000\006\036\u0151\043\u0150\001\002\000\004" +
    "\012\uff99\001\002\000\004\006\u0162\001\002\000\004\006" +
    "\u0152\001\002\000\004\010\u0153\001\002\000\004\034\u0154" +
    "\001\002\000\004\010\u0155\001\002\000\004\007\u0156\001" +
    "\002\000\004\043\u0158\001\002\000\004\012\uff94\001\002" +
    "\000\004\006\u0159\001\002\000\004\004\u015a\001\002\000" +
    "\004\010\u015c\001\002\000\004\005\u0161\001\002\000\004" +
    "\034\u015d\001\002\000\004\010\u015e\001\002\000\006\005" +
    "\uff8e\007\u015f\001\002\000\004\010\u015c\001\002\000\004" +
    "\005\uff8f\001\002\000\004\012\uff91\001\002\000\004\004" +
    "\u0163\001\002\000\004\010\u015c\001\002\000\004\005\u0165" +
    "\001\002\000\004\007\u0166\001\002\000\004\036\u0168\001" +
    "\002\000\004\012\uff93\001\002\000\004\006\u0169\001\002" +
    "\000\004\010\u016a\001\002\000\004\034\u016b\001\002\000" +
    "\004\010\u016c\001\002\000\004\012\uff90\001\002\000\004" +
    "\010\u016e\001\002\000\004\034\u016f\001\002\000\004\010" +
    "\u0170\001\002\000\004\007\u0171\001\002\000\006\043\u0172" +
    "\044\u0174\001\002\000\004\006\u0179\001\002\000\004\012" +
    "\uff9b\001\002\000\004\006\u0175\001\002\000\010\045\u014a" +
    "\046\u014d\047\u014c\001\002\000\004\007\u0177\001\002\000" +
    "\004\043\u0158\001\002\000\004\012\uff97\001\002\000\004" +
    "\004\u017a\001\002\000\004\010\u015c\001\002\000\004\005" +
    "\u017c\001\002\000\004\007\u017d\001\002\000\004\044\u017f" +
    "\001\002\000\004\012\uff98\001\002\000\004\006\u0180\001" +
    "\002\000\010\045\u014a\046\u014d\047\u014c\001\002\000\004" +
    "\012\uff92\001\002\000\004\004\u0183\001\002\000\004\010" +
    "\u015c\001\002\000\004\005\u0185\001\002\000\004\007\u0186" +
    "\001\002\000\006\036\u0188\044\u0189\001\002\000\004\012" +
    "\uff9a\001\002\000\004\006\u018e\001\002\000\004\006\u018a" +
    "\001\002\000\010\045\u014a\046\u014d\047\u014c\001\002\000" +
    "\004\007\u018c\001\002\000\004\036\u0168\001\002\000\004" +
    "\012\uff95\001\002\000\004\010\u018f\001\002\000\004\034" +
    "\u0190\001\002\000\004\010\u0191\001\002\000\004\007\u0192" +
    "\001\002\000\004\044\u017f\001\002\000\004\012\uff96\001" +
    "\002\000\006\005\uff9c\007\u0195\001\002\000\004\011\216" +
    "\001\002\000\004\005\uff9d\001\002\000\004\004\u0198\001" +
    "\002\000\004\011\226\001\002\000\004\005\u019a\001\002" +
    "\000\004\007\u019b\001\002\000\004\016\u019c\001\002\000" +
    "\004\006\u019e\001\002\000\004\012\ufff5\001\002\000\004" +
    "\004\u019f\001\002\000\004\011\216\001\002\000\004\005" +
    "\u01a1\001\002\000\004\012\ufff1\001\002\000\004\012\u01a3" +
    "\001\002\000\006\005\uffbe\007\u01a4\001\002\000\004\011" +
    "\226\001\002\000\004\005\uffbf\001\002\000\004\004\u01a7" +
    "\001\002\000\004\011\216\001\002\000\004\005\u01a9\001" +
    "\002\000\004\007\u01aa\001\002\000\006\014\u01ac\015\u01ad" +
    "\001\002\000\004\012\ufff9\001\002\000\004\006\u01b3\001" +
    "\002\000\004\006\u01ae\001\002\000\004\004\u01af\001\002" +
    "\000\004\005\u01b0\001\002\000\004\007\u01b1\001\002\000" +
    "\004\014\223\001\002\000\004\012\ufff2\001\002\000\004" +
    "\004\u01b4\001\002\000\004\011\226\001\002\000\004\005" +
    "\u01b6\001\002\000\004\007\u01b7\001\002\000\004\015\u01b8" +
    "\001\002\000\004\006\u01ba\001\002\000\004\012\ufff3\001" +
    "\002\000\004\004\u01bb\001\002\000\004\011\205\001\002" +
    "\000\004\005\u01bd\001\002\000\004\012\ufff0\001\002\000" +
    "\004\004\u01bf\001\002\000\004\011\226\001\002\000\004" +
    "\005\u01c1\001\002\000\004\007\u01c2\001\002\000\006\015" +
    "\u01c5\016\u01c4\001\002\000\004\012\ufffb\001\002\000\004" +
    "\006\u01cd\001\002\000\004\006\ufff8\001\002\000\004\006" +
    "\u01c7\001\002\000\004\004\u01c8\001\002\000\004\011\205" +
    "\001\002\000\004\005\u01ca\001\002\000\004\007\u01cb\001" +
    "\002\000\004\016\u019c\001\002\000\004\012\ufff7\001\002" +
    "\000\004\004\u01ce\001\002\000\004\011\216\001\002\000" +
    "\004\005\u01d0\001\002\000\004\007\u01d1\001\002\000\004" +
    "\015\u01b8\001\002\000\004\012\ufff6\001\002\000\006\050" +
    "\036\051\037\001\002\000\006\007\105\012\uffd2\001\002" +
    "\000\004\012\uffd9\001\002\000\004\004\u01d7\001\002\000" +
    "\004\011\205\001\002\000\004\005\u01d9\001\002\000\004" +
    "\007\u01da\001\002\000\010\013\u01de\014\u01dc\016\u01dd\001" +
    "\002\000\004\012\ufffd\001\002\000\004\006\u01fe\001\002" +
    "\000\004\006\u01e5\001\002\000\004\006\u01df\001\002\000" +
    "\004\011\u01e0\001\002\000\022\017\022\020\023\023\021" +
    "\024\024\025\025\026\016\027\026\033\020\001\002\000" +
    "\004\012\u01e2\001\002\000\004\007\u01e3\001\002\000\006" +
    "\014\212\016\213\001\002\000\004\012\uffe6\001\002\000" +
    "\004\004\u01e6\001\002\000\004\011\216\001\002\000\004" +
    "\005\u01e8\001\002\000\004\007\u01e9\001\002\000\006\013" +
    "\u01ec\014\u01ea\001\002\000\004\006\u01f3\001\002\000\004" +
    "\012\uffe4\001\002\000\004\006\u01ed\001\002\000\004\011" +
    "\u01ee\001\002\000\022\017\022\020\023\023\021\024\024" +
    "\025\025\026\016\027\026\033\020\001\002\000\004\012" +
    "\u01f0\001\002\000\004\007\u01f1\001\002\000\004\014\223" +
    "\001\002\000\004\012\uffe3\001\002\000\004\004\u01f4\001" +
    "\002\000\004\011\226\001\002\000\004\005\u01f6\001\002" +
    "\000\004\007\u01f7\001\002\000\004\013\u01f9\001\002\000" +
    "\004\012\uffe2\001\002\000\004\006\u01fa\001\002\000\004" +
    "\011\u01fb\001\002\000\022\017\022\020\023\023\021\024" +
    "\024\025\025\026\016\027\026\033\020\001\002\000\004" +
    "\012\u01fd\001\002\000\004\012\uffe7\001\002\000\004\004" +
    "\u01ff\001\002\000\004\011\226\001\002\000\004\005\u0201" +
    "\001\002\000\004\007\u0202\001\002\000\006\013\u0205\016" +
    "\u0204\001\002\000\004\012\uffe5\001\002\000\004\006\u020c" +
    "\001\002\000\004\006\u0206\001\002\000\004\011\u0207\001" +
    "\002\000\022\017\022\020\023\023\021\024\024\025\025" +
    "\026\016\027\026\033\020\001\002\000\004\012\u0209\001" +
    "\002\000\004\007\u020a\001\002\000\004\016\u019c\001\002" +
    "\000\004\012\uffeb\001\002\000\004\004\u020d\001\002\000" +
    "\004\011\216\001\002\000\004\005\u020f\001\002\000\004" +
    "\007\u0210\001\002\000\004\013\u01f9\001\002\000\004\012" +
    "\uffea\001\002\000\004\002\000\001\002\000\004\004\u0214" +
    "\001\002\000\004\011\216\001\002\000\004\005\u0216\001" +
    "\002\000\004\007\u0217\001\002\000\010\013\u021b\014\u0219" +
    "\015\u021a\001\002\000\004\012\ufffc\001\002\000\004\006" +
    "\u0228\001\002\000\004\006\u0222\001\002\000\004\006\u021c" +
    "\001\002\000\004\011\u021d\001\002\000\022\017\022\020" +
    "\023\023\021\024\024\025\025\026\016\027\026\033\020" +
    "\001\002\000\004\012\u021f\001\002\000\004\007\u0220\001" +
    "\002\000\006\014\u01ac\015\u01ad\001\002\000\004\012\uffe1" +
    "\001\002\000\004\004\u0223\001\002\000\004\011\205\001" +
    "\002\000\004\005\u0225\001\002\000\004\007\u0226\001\002" +
    "\000\006\013\u01ec\014\u01ea\001\002\000\004\012\uffdf\001" +
    "\002\000\004\004\u0229\001\002\000\004\011\226\001\002" +
    "\000\004\005\u022b\001\002\000\004\007\u022c\001\002\000" +
    "\006\013\u022f\015\u022e\001\002\000\004\012\uffe0\001\002" +
    "\000\004\006\u0236\001\002\000\004\006\u0230\001\002\000" +
    "\004\011\u0231\001\002\000\022\017\022\020\023\023\021" +
    "\024\024\025\025\026\016\027\026\033\020\001\002\000" +
    "\004\012\u0233\001\002\000\004\007\u0234\001\002\000\004" +
    "\015\u01b8\001\002\000\004\012\uffe9\001\002\000\004\004" +
    "\u0237\001\002\000\004\011\205\001\002\000\004\005\u0239" +
    "\001\002\000\004\007\u023a\001\002\000\004\013\u01f9\001" +
    "\002\000\004\012\uffe8\001\002\000\004\004\u023d\001\002" +
    "\000\004\011\226\001\002\000\004\005\u023f\001\002\000" +
    "\004\007\u0240\001\002\000\010\013\u0244\015\u0243\016\u0242" +
    "\001\002\000\004\012\ufffe\001\002\000\004\006\u0251\001" +
    "\002\000\004\006\u024b\001\002\000\004\006\u0245\001\002" +
    "\000\004\011\u0246\001\002\000\022\017\022\020\023\023" +
    "\021\024\024\025\025\026\016\027\026\033\020\001\002" +
    "\000\004\012\u0248\001\002\000\004\007\u0249\001\002\000" +
    "\006\015\u01c5\016\u01c4\001\002\000\004\012\uffee\001\002" +
    "\000\004\004\u024c\001\002\000\004\011\205\001\002\000" +
    "\004\005\u024e\001\002\000\004\007\u024f\001\002\000\006" +
    "\013\u0205\016\u0204\001\002\000\004\012\uffed\001\002\000" +
    "\004\004\u0252\001\002\000\004\011\216\001\002\000\004" +
    "\005\u0254\001\002\000\004\007\u0255\001\002\000\006\013" +
    "\u022f\015\u022e\001\002\000\004\012\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0254\000\004\002\004\001\001\000\004\003\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\071\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\045" +
    "\001\001\000\002\001\001\000\004\041\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\061\001\001\000\002\001\001\000\004\024\063\001" +
    "\001\000\002\001\001\000\004\036\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\071\001\001\000\002\001\001\000\004\041\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\102\001\001\000\002\001\001\000\004\035" +
    "\105\001\001\000\004\022\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\116\001\001\000\002\001" +
    "\001\000\004\043\120\001\001\000\002\001\001\000\004" +
    "\024\122\001\001\000\002\001\001\000\004\042\124\001" +
    "\001\000\002\001\001\000\004\024\126\001\001\000\004" +
    "\035\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\035\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\035\155\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\162\001\001\000\002\001\001\000\004\024\164\001\001" +
    "\000\004\035\165\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\170\001\001\000\002\001\001\000\004" +
    "\073\172\001\001\000\004\035\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\205\001\001\000\004" +
    "\030\u01a1\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\216\001" +
    "\001\000\004\032\u0144\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\226\001\001" +
    "\000\004\030\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\276\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\055\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\050\350\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\355\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\054\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\370\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\060\u010d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\047\u0112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\u011a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\u011e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\061\u0123\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\u012a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\u012e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u0134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\u013b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\056\u013f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\u0143" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\034\u014a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\064\u014e\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\u0156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\u015a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\u015f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u0163\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\067\u0166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\u0172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\u0175\001\001\000" +
    "\002\001\001\000\004\066\u0177\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\u017a\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\065\u017d\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\u0180\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\033\u0183\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\063\u0186\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\u018a\001\001\000\002\001\001\000\004\067" +
    "\u018c\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\065" +
    "\u0192\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u0195\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\u0198\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u019c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\031\u019f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u01a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u01a7\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u01aa\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\u01b1\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\026\u01b4\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\u01b8" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u01bb\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u01bf\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\u01c2\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\070\u01c5\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\u01c8" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\u01cb\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\u01ce\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u01d1\001\001\000\002\001\001\000\004\024\u01d3" +
    "\001\001\000\004\035\u01d4\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\u01d7\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\u01da\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\u01e0\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u01e3\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u01e6\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\u01ea\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u01ee\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u01f1\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\u01f4\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\u01f7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\u01fb\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\026\u01ff\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u0202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\u0207\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\u020a\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\u020d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\u0210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\u0214\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\u0217" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\u021d" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0220\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\u0223\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0226\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\u0229\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u022c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\u0231\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u0234\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u0237\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\u023a\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u023d\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\u0240\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\u0246\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\u0249\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\u024c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u024f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\u0252\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u0255\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    public void syntaxError(Symbol s){
        this.s = s;
    }
    public Symbol getS(Symbol s){
        return this.s = s;
    }

    public void setAccion(String tipo,String mensaje,String accion){
            System.out.println(tipo+"         "+mensaje);
        }

    public void syntax_error(Symbol s){
            if(s!=null){
                //Error e = new Error((String) s.value, "Sintactico", "Error Sintaxis token: " + s.right + " " + s.left + " " + s.value, s.right, s.left);
            
                //escribirErrores(e);
                setAccion("ERROR","Error Sintaxis token: " + (s.right+1) + " " + (s.left+1) + " " + s.value, "");
            }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintactico$actions {



    

  private final AnalizadorSintactico parser;

  /** Constructor */
  CUP$AnalizadorSintactico$actions(AnalizadorSintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintactico$do_action(
    int                        CUP$AnalizadorSintactico$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintactico$parser,
    java.util.Stack            CUP$AnalizadorSintactico$stack,
    int                        CUP$AnalizadorSintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintactico$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DIFICULTADES ::= DIFICIL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIFICULTADES",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DIFICULTADES ::= FACIL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIFICULTADES",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DIFICULTADES ::= HUMANO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIFICULTADES",26, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // PLANET_ASIG ::= COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PLANET_ASIG",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // PLANET_ASIG ::= COMILLAS IDENTIFICADOR COMILLAS COMA PLANET_ASIG 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("PLANET_ASIG",25, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ATJ6 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ6",53, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ATJ5 ::= PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ5",52, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ATJ4 ::= TIPO DOS_PUNTOS DIFICULTADES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ4",51, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ATJ3 ::= PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C COMA ATJ6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ3",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ATJ3 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATJ5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ3",50, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ATJ2 ::= TIPO DOS_PUNTOS DIFICULTADES COMA ATJ6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ2",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ATJ2 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATJ4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ2",49, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ATJ1 ::= TIPO DOS_PUNTOS DIFICULTADES COMA ATJ5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ1",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ATJ1 ::= PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C COMA ATJ4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATJ1",48, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ATRIB_JUGADORES ::= TIPO DOS_PUNTOS DIFICULTADES COMA ATJ3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_JUGADORES",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ATRIB_JUGADORES ::= PLANETAS_JUGADOR DOS_PUNTOS CORCHE_A PLANET_ASIG CORCHE_C COMA ATJ2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_JUGADORES",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ATRIB_JUGADORES ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATJ1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_JUGADORES",24, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ESTRUCTURA_JUGADORES ::= LLAVES_A ATRIB_JUGADORES LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_JUGADORES",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ESTRUCTURA_JUGADORES ::= LLAVES_A ATRIB_JUGADORES LLAVES_C COMA ESTRUCTURA_JUGADORES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_JUGADORES",23, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ATP14 ::= NAVES DOS_PUNTOS NUMERO COMA ATP13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP14",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ATP14 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATP10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP14",47, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ATP13 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP13",46, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ATP12 ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATP13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP12",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ATP12 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATP9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP12",45, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ATP11 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO COMA ATP13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP11",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ATP11 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATP8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP11",44, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ATP10 ::= NAVES DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP10",43, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ATP9 ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP9",42, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ATP8 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP8",41, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ATP7 ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATP10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP7",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ATP7 ::= NAVES DOS_PUNTOS NUMERO COMA ATP9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP7",40, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ATP6 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO COMA ATP10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ATP6 ::= NAVES DOS_PUNTOS NUMERO COMA ATP8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP6",39, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ATP5 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO COMA ATP9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP5",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ATP5 ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATP8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP5",38, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ATP4 ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATP14 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ATP4 ::= NAVES DOS_PUNTOS NUMERO COMA ATP12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ATP4 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATP7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP4",37, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ATP3 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO COMA ATP14 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ATP3 ::= NAVES DOS_PUNTOS NUMERO COMA ATP11 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ATP3 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP3",36, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ATP2 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO COMA ATP12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ATP2 ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATP11 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ATP2 ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATP5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP2",35, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ATP1 ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO COMA ATP7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ATP1 ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATP6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ATP1 ::= NAVES DOS_PUNTOS NUMERO COMA ATP5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATP1",34, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ATRIB_PLANETAS ::= PORCENTAJE_MUERTES DOS_PUNTOS NUMERO COMA ATP4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ATRIB_PLANETAS ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATP3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ATRIB_PLANETAS ::= NAVES DOS_PUNTOS NUMERO COMA ATP2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ATRIB_PLANETAS ::= NOMBRE DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS COMA ATP1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_PLANETAS",22, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ESTRUCTURA_PLANT_NEU ::= LLAVES_A ATRIB_PLANETAS LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANT_NEU",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ESTRUCTURA_PLANT_NEU ::= LLAVES_A ATRIB_PLANETAS LLAVES_C COMA ESTRUCTURA_PLANETAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANT_NEU",21, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ESTRUCTURA_PLANETAS ::= LLAVES_A ATRIB_PLANETAS LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANETAS",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ESTRUCTURA_PLANETAS ::= LLAVES_A ATRIB_PLANETAS LLAVES_C COMA ESTRUCTURA_PLANETAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PLANETAS",20, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ATN6 ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN6",33, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ATN5 ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN5",32, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ATN4 ::= PRODUCCION DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN4",31, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ATN3 ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO COMA ATN6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN3",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATN3 ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO COMA ATN5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN3",30, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATN2 ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATN6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN2",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ATN2 ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO COMA ATN4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN2",29, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ATN1 ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATN5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN1",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ATN1 ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO COMA ATN4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATN1",28, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIB_NEU ::= PRODUCCION DOS_PUNTOS NUMERO COMA ATN3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIB_NEU ::= MOSTRAR_ESTADISTICAS DOS_PUNTOS BOLEANO COMA ATN2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIB_NEU ::= MOSTRAR_NAVES DOS_PUNTOS BOLEANO COMA ATN1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ATRIB_NEU",19, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BOLEANO ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BOLEANO",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BOLEANO ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("BOLEANO",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DIMENSION ::= COLUMNAS DOS_PUNTOS NUMERO COMA FILAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DIMENSION ::= FILAS DOS_PUNTOS NUMERO COMA COLUMNAS DOS_PUNTOS NUMERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("DIMENSION",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MAPA_FIN ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAPA_FIN",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MAPA_FIN ::= COMA ESTRUCTURA_MAPA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("MAPA_FIN",27, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ESTRUCTURA_MAPA ::= FINALIZACION NT$1 DOS_PUNTOS NT$2 NUMERO NT$3 MAPA_FIN 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
System.out.println("catidsa"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
System.out.println("doss puntos"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$1 ::= 
            {
              Object RESULT =null;
System.out.println("Finaliza"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ESTRUCTURA_MAPA ::= NEUTRALES DOS_PUNTOS LLAVES_A ATRIB_NEU LLAVES_C MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ESTRUCTURA_MAPA ::= ACUMULAR DOS_PUNTOS BOLEANO MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESTRUCTURA_MAPA ::= MAPA_CIEGO DOS_PUNTOS BOLEANO MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESTRUCTURA_MAPA ::= PLANET_NEU DOS_PUNTOS NUMERO MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ESTRUCTURA_MAPA ::= ALAZAR DOS_PUNTOS BOLEANO MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESTRUCTURA_MAPA ::= TAMANO DOS_PUNTOS LLAVES_A DIMENSION LLAVES_C MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTRUCTURA_MAPA ::= ID DOS_PUNTOS COMILLAS IDENTIFICADOR COMILLAS MAPA_FIN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MAPA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // S4 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S14 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S4",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // S4 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S4",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // S4 ::= MAPA DOS_PUNTOS LLAVES_A ESTRUCTURA_MAPA LLAVES_C COMA S7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S4",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // S14 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S14",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // S14 ::= MAPA DOS_PUNTOS LLAVES_A ESTRUCTURA_MAPA LLAVES_C COMA S10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S14",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // S3 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S14 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S3",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // S3 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S11 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S3",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // S3 ::= MAPA DOS_PUNTOS LLAVES_A ESTRUCTURA_MAPA LLAVES_C COMA S6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S3",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // S13 ::= MAPA DOS_PUNTOS LLAVES_A ESTRUCTURA_MAPA LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S13",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // S12 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S12",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // S12 ::= MAPA DOS_PUNTOS LLAVES_A ESTRUCTURA_MAPA LLAVES_C COMA S9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S12",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // S11 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S13 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S11",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // S11 ::= MAPA DOS_PUNTOS LLAVES_A ESTRUCTURA_MAPA LLAVES_C COMA S8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S11",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // S2 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S12 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S2",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S2 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S11 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S2",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S2 ::= MAPA DOS_PUNTOS LLAVES_A ESTRUCTURA_MAPA LLAVES_C COMA S5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S2",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S10 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S10",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S9 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S9",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S8 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S8",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S7 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A CORCHE_C COMA S10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S7",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S7 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S7",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S6 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S10 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S6",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S6 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S8 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S6",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S5 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S9 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S5",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S5 ::= PLANETAS_NEUTRALES NT$0 DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)).value;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S5",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-7)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
System.out.println("entroooo"); 
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S1 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S1",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S1 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S1",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S1 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S1",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S0 ::= JUGADORES DOS_PUNTOS CORCHE_A ESTRUCTURA_JUGADORES CORCHE_C COMA S4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S0 ::= PLANETAS_NEUTRALES DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANT_NEU CORCHE_C COMA S3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S0 ::= PLANETAS DOS_PUNTOS CORCHE_A ESTRUCTURA_PLANETAS CORCHE_C COMA S2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0 ::= MAPA DOS_PUNTOS LLAVES_A ESTRUCTURA_MAPA LLAVES_C COMA S1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("S0",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LLAVES_A S0 LLAVES_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.elementAt(CUP$AnalizadorSintactico$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintactico$parser.done_parsing();
          return CUP$AnalizadorSintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

